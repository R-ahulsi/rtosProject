
7_PeriodicScheduler1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000060c  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080007a4  080007ac  000017ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080007a4  080007a4  000017ac  2**0
                  CONTENTS
  4 .ARM          00000000  080007a4  080007a4  000017ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  080007a4  080007ac  000017ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080007a4  080007a4  000017a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080007a8  080007a8  000017a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000017ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001310  20000000  080007ac  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001310  080007ac  00002310  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000017ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000da9  00000000  00000000  000017dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004aa  00000000  00000000  00002585  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000128  00000000  00000000  00002a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000cc  00000000  00000000  00002b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000f9f  00000000  00000000  00002c24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000016c7  00000000  00000000  00003bc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00053861  00000000  00000000  0000528a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00058aeb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000330  00000000  00000000  00058b30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00058e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800078c 	.word	0x0800078c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	0800078c 	.word	0x0800078c

080001d8 <task0>:
void motor_run(void);
void motor_stop(void);
void valve_open(void);
void valve_close(void);

void task0(void){
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	while(1){
		Task0_Profiler++;
 80001dc:	4b04      	ldr	r3, [pc, #16]	@ (80001f0 <task0+0x18>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	3301      	adds	r3, #1
 80001e2:	4a03      	ldr	r2, [pc, #12]	@ (80001f0 <task0+0x18>)
 80001e4:	6013      	str	r3, [r2, #0]
		osThreadYield();
 80001e6:	f000 f9e3 	bl	80005b0 <osThreadYield>
		Task0_Profiler++;
 80001ea:	bf00      	nop
 80001ec:	e7f6      	b.n	80001dc <task0+0x4>
 80001ee:	bf00      	nop
 80001f0:	2000001c 	.word	0x2000001c

080001f4 <task1>:
	}
}


void task1(void){
 80001f4:	b580      	push	{r7, lr}
 80001f6:	af00      	add	r7, sp, #0
	while(1){
		Task1_Profiler++;
 80001f8:	4b04      	ldr	r3, [pc, #16]	@ (800020c <task1+0x18>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	3301      	adds	r3, #1
 80001fe:	4a03      	ldr	r2, [pc, #12]	@ (800020c <task1+0x18>)
 8000200:	6013      	str	r3, [r2, #0]
		osThreadYield();
 8000202:	f000 f9d5 	bl	80005b0 <osThreadYield>
		Task1_Profiler++;
 8000206:	bf00      	nop
 8000208:	e7f6      	b.n	80001f8 <task1+0x4>
 800020a:	bf00      	nop
 800020c:	20000020 	.word	0x20000020

08000210 <task2>:
	}
}

void task2(void){
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
	while(1){
		Task2_Profiler++;
 8000214:	4b04      	ldr	r3, [pc, #16]	@ (8000228 <task2+0x18>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	3301      	adds	r3, #1
 800021a:	4a03      	ldr	r2, [pc, #12]	@ (8000228 <task2+0x18>)
 800021c:	6013      	str	r3, [r2, #0]
		osThreadYield();
 800021e:	f000 f9c7 	bl	80005b0 <osThreadYield>
		Task2_Profiler++;
 8000222:	bf00      	nop
 8000224:	e7f6      	b.n	8000214 <task2+0x4>
 8000226:	bf00      	nop
 8000228:	20000024 	.word	0x20000024

0800022c <task3>:
	}
}

void task3(void){
 800022c:	b580      	push	{r7, lr}
 800022e:	af00      	add	r7, sp, #0
	periodicTask++;
 8000230:	4b04      	ldr	r3, [pc, #16]	@ (8000244 <task3+0x18>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	3301      	adds	r3, #1
 8000236:	4a03      	ldr	r2, [pc, #12]	@ (8000244 <task3+0x18>)
 8000238:	6013      	str	r3, [r2, #0]
	osThreadYield();
 800023a:	f000 f9b9 	bl	80005b0 <osThreadYield>
}
 800023e:	bf00      	nop
 8000240:	bd80      	pop	{r7, pc}
 8000242:	bf00      	nop
 8000244:	20000028 	.word	0x20000028

08000248 <main>:

int main(void){
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
	uart_tx_init();
 800024c:	f000 f9de 	bl	800060c <uart_tx_init>
	osKernelInit();
 8000250:	f000 f948 	bl	80004e4 <osKernelInit>
	osKernelAddThreads(&task0,&task1,&task2);
 8000254:	4a05      	ldr	r2, [pc, #20]	@ (800026c <main+0x24>)
 8000256:	4906      	ldr	r1, [pc, #24]	@ (8000270 <main+0x28>)
 8000258:	4806      	ldr	r0, [pc, #24]	@ (8000274 <main+0x2c>)
 800025a:	f000 f907 	bl	800046c <osKernelAddThreads>
	osKernelLaunch(QUANTA);
 800025e:	200a      	movs	r0, #10
 8000260:	f000 f94e 	bl	8000500 <osKernelLaunch>
 8000264:	2300      	movs	r3, #0
}
 8000266:	4618      	mov	r0, r3
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	08000211 	.word	0x08000211
 8000270:	080001f5 	.word	0x080001f5
 8000274:	080001d9 	.word	0x080001d9

08000278 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000278:	b480      	push	{r7}
 800027a:	b083      	sub	sp, #12
 800027c:	af00      	add	r7, sp, #0
 800027e:	4603      	mov	r3, r0
 8000280:	6039      	str	r1, [r7, #0]
 8000282:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000288:	2b00      	cmp	r3, #0
 800028a:	db0a      	blt.n	80002a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028c:	683b      	ldr	r3, [r7, #0]
 800028e:	b2da      	uxtb	r2, r3
 8000290:	490c      	ldr	r1, [pc, #48]	@ (80002c4 <__NVIC_SetPriority+0x4c>)
 8000292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000296:	0112      	lsls	r2, r2, #4
 8000298:	b2d2      	uxtb	r2, r2
 800029a:	440b      	add	r3, r1
 800029c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002a0:	e00a      	b.n	80002b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a2:	683b      	ldr	r3, [r7, #0]
 80002a4:	b2da      	uxtb	r2, r3
 80002a6:	4908      	ldr	r1, [pc, #32]	@ (80002c8 <__NVIC_SetPriority+0x50>)
 80002a8:	79fb      	ldrb	r3, [r7, #7]
 80002aa:	f003 030f 	and.w	r3, r3, #15
 80002ae:	3b04      	subs	r3, #4
 80002b0:	0112      	lsls	r2, r2, #4
 80002b2:	b2d2      	uxtb	r2, r2
 80002b4:	440b      	add	r3, r1
 80002b6:	761a      	strb	r2, [r3, #24]
}
 80002b8:	bf00      	nop
 80002ba:	370c      	adds	r7, #12
 80002bc:	46bd      	mov	sp, r7
 80002be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c2:	4770      	bx	lr
 80002c4:	e000e100 	.word	0xe000e100
 80002c8:	e000ed00 	.word	0xe000ed00

080002cc <osKernelStackInit>:

// Each thread will have stack size of 400bytes
int32_t TCB_STACK[NUM_OF_THREADS][STACKSIZE];

void osKernelStackInit(int i)
{
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
	tcbs[i].stackPt =  &TCB_STACK[i][STACKSIZE - 16]; // Stack Pointer
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80002da:	fb02 f303 	mul.w	r3, r2, r3
 80002de:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 80002e2:	4a60      	ldr	r2, [pc, #384]	@ (8000464 <osKernelStackInit+0x198>)
 80002e4:	441a      	add	r2, r3
 80002e6:	4960      	ldr	r1, [pc, #384]	@ (8000468 <osKernelStackInit+0x19c>)
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]

	// Set bit21 in PSR to 1 for thumb mode
	TCB_STACK[i][STACKSIZE - 1] =  (1U<<24);
 80002ee:	4a5d      	ldr	r2, [pc, #372]	@ (8000464 <osKernelStackInit+0x198>)
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80002f6:	fb01 f303 	mul.w	r3, r1, r3
 80002fa:	4413      	add	r3, r2
 80002fc:	f203 633c 	addw	r3, r3, #1596	@ 0x63c
 8000300:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000304:	601a      	str	r2, [r3, #0]

	// Block below is optional/for debugging purpose only
	// Dummy stack content
	TCB_STACK[i][STACKSIZE-3]  = 0xAAAAAAAA;    // R14
 8000306:	4a57      	ldr	r2, [pc, #348]	@ (8000464 <osKernelStackInit+0x198>)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 800030e:	fb01 f303 	mul.w	r3, r1, r3
 8000312:	4413      	add	r3, r2
 8000314:	f203 6334 	addw	r3, r3, #1588	@ 0x634
 8000318:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 800031c:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-4]  = 0xAAAAAAAA;    // R12
 800031e:	4a51      	ldr	r2, [pc, #324]	@ (8000464 <osKernelStackInit+0x198>)
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8000326:	fb01 f303 	mul.w	r3, r1, r3
 800032a:	4413      	add	r3, r2
 800032c:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 8000330:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000334:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-5]  = 0xAAAAAAAA;    // R3
 8000336:	4a4b      	ldr	r2, [pc, #300]	@ (8000464 <osKernelStackInit+0x198>)
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 800033e:	fb01 f303 	mul.w	r3, r1, r3
 8000342:	4413      	add	r3, r2
 8000344:	f203 632c 	addw	r3, r3, #1580	@ 0x62c
 8000348:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 800034c:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-6]  = 0xAAAAAAAA;    // R2
 800034e:	4a45      	ldr	r2, [pc, #276]	@ (8000464 <osKernelStackInit+0x198>)
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8000356:	fb01 f303 	mul.w	r3, r1, r3
 800035a:	4413      	add	r3, r2
 800035c:	f503 63c5 	add.w	r3, r3, #1576	@ 0x628
 8000360:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000364:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-7]  = 0xAAAAAAAA;    // R1
 8000366:	4a3f      	ldr	r2, [pc, #252]	@ (8000464 <osKernelStackInit+0x198>)
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 800036e:	fb01 f303 	mul.w	r3, r1, r3
 8000372:	4413      	add	r3, r2
 8000374:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 8000378:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 800037c:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-8]  = 0xAAAAAAAA;    // R0
 800037e:	4a39      	ldr	r2, [pc, #228]	@ (8000464 <osKernelStackInit+0x198>)
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8000386:	fb01 f303 	mul.w	r3, r1, r3
 800038a:	4413      	add	r3, r2
 800038c:	f503 63c4 	add.w	r3, r3, #1568	@ 0x620
 8000390:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000394:	601a      	str	r2, [r3, #0]

	TCB_STACK[i][STACKSIZE-9]  = 0xAAAAAAAA;    // R11
 8000396:	4a33      	ldr	r2, [pc, #204]	@ (8000464 <osKernelStackInit+0x198>)
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 800039e:	fb01 f303 	mul.w	r3, r1, r3
 80003a2:	4413      	add	r3, r2
 80003a4:	f203 631c 	addw	r3, r3, #1564	@ 0x61c
 80003a8:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80003ac:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-10] = 0xAAAAAAAA;   // R10
 80003ae:	4a2d      	ldr	r2, [pc, #180]	@ (8000464 <osKernelStackInit+0x198>)
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80003b6:	fb01 f303 	mul.w	r3, r1, r3
 80003ba:	4413      	add	r3, r2
 80003bc:	f503 63c3 	add.w	r3, r3, #1560	@ 0x618
 80003c0:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80003c4:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-11] = 0xAAAAAAAA;   // R9
 80003c6:	4a27      	ldr	r2, [pc, #156]	@ (8000464 <osKernelStackInit+0x198>)
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80003ce:	fb01 f303 	mul.w	r3, r1, r3
 80003d2:	4413      	add	r3, r2
 80003d4:	f203 6314 	addw	r3, r3, #1556	@ 0x614
 80003d8:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80003dc:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-12] = 0xAAAAAAAA;   // R8
 80003de:	4a21      	ldr	r2, [pc, #132]	@ (8000464 <osKernelStackInit+0x198>)
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80003e6:	fb01 f303 	mul.w	r3, r1, r3
 80003ea:	4413      	add	r3, r2
 80003ec:	f503 63c2 	add.w	r3, r3, #1552	@ 0x610
 80003f0:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80003f4:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-13] = 0xAAAAAAAA;   // R7
 80003f6:	4a1b      	ldr	r2, [pc, #108]	@ (8000464 <osKernelStackInit+0x198>)
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80003fe:	fb01 f303 	mul.w	r3, r1, r3
 8000402:	4413      	add	r3, r2
 8000404:	f203 630c 	addw	r3, r3, #1548	@ 0x60c
 8000408:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 800040c:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-14] = 0xAAAAAAAA;   // R6
 800040e:	4a15      	ldr	r2, [pc, #84]	@ (8000464 <osKernelStackInit+0x198>)
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8000416:	fb01 f303 	mul.w	r3, r1, r3
 800041a:	4413      	add	r3, r2
 800041c:	f503 63c1 	add.w	r3, r3, #1544	@ 0x608
 8000420:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000424:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-15] = 0xAAAAAAAA;   // R5
 8000426:	4a0f      	ldr	r2, [pc, #60]	@ (8000464 <osKernelStackInit+0x198>)
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 800042e:	fb01 f303 	mul.w	r3, r1, r3
 8000432:	4413      	add	r3, r2
 8000434:	f203 6304 	addw	r3, r3, #1540	@ 0x604
 8000438:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 800043c:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-16] = 0xAAAAAAAA;   // R4
 800043e:	4a09      	ldr	r2, [pc, #36]	@ (8000464 <osKernelStackInit+0x198>)
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8000446:	fb01 f303 	mul.w	r3, r1, r3
 800044a:	4413      	add	r3, r2
 800044c:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8000450:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000454:	601a      	str	r2, [r3, #0]
}
 8000456:	bf00      	nop
 8000458:	370c      	adds	r7, #12
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	20000050 	.word	0x20000050
 8000468:	20000034 	.word	0x20000034

0800046c <osKernelAddThreads>:

uint8_t osKernelAddThreads(void(*task0)(void),void(*task1)(void),void(*task2)(void))
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b084      	sub	sp, #16
 8000470:	af00      	add	r7, sp, #0
 8000472:	60f8      	str	r0, [r7, #12]
 8000474:	60b9      	str	r1, [r7, #8]
 8000476:	607a      	str	r2, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000478:	b672      	cpsid	i
}
 800047a:	bf00      	nop
	// Disable global interrupts
	__disable_irq();
	tcbs[0].nextPt =  &tcbs[1];
 800047c:	4b14      	ldr	r3, [pc, #80]	@ (80004d0 <osKernelAddThreads+0x64>)
 800047e:	4a15      	ldr	r2, [pc, #84]	@ (80004d4 <osKernelAddThreads+0x68>)
 8000480:	605a      	str	r2, [r3, #4]
	tcbs[1].nextPt =  &tcbs[2];
 8000482:	4b13      	ldr	r3, [pc, #76]	@ (80004d0 <osKernelAddThreads+0x64>)
 8000484:	4a14      	ldr	r2, [pc, #80]	@ (80004d8 <osKernelAddThreads+0x6c>)
 8000486:	60da      	str	r2, [r3, #12]
	tcbs[2].nextPt =  &tcbs[0];
 8000488:	4b11      	ldr	r3, [pc, #68]	@ (80004d0 <osKernelAddThreads+0x64>)
 800048a:	4a11      	ldr	r2, [pc, #68]	@ (80004d0 <osKernelAddThreads+0x64>)
 800048c:	615a      	str	r2, [r3, #20]

	// Initial stack for thread0
	osKernelStackInit(0);
 800048e:	2000      	movs	r0, #0
 8000490:	f7ff ff1c 	bl	80002cc <osKernelStackInit>

	// Initial PC
	TCB_STACK[0][STACKSIZE - 2] =  (int32_t)(task0);
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	4a11      	ldr	r2, [pc, #68]	@ (80004dc <osKernelAddThreads+0x70>)
 8000498:	f8c2 3638 	str.w	r3, [r2, #1592]	@ 0x638

	// Same for thread1
	osKernelStackInit(1);
 800049c:	2001      	movs	r0, #1
 800049e:	f7ff ff15 	bl	80002cc <osKernelStackInit>
	TCB_STACK[1][STACKSIZE - 2] =  (int32_t)(task1);
 80004a2:	68bb      	ldr	r3, [r7, #8]
 80004a4:	4a0d      	ldr	r2, [pc, #52]	@ (80004dc <osKernelAddThreads+0x70>)
 80004a6:	f8c2 3c78 	str.w	r3, [r2, #3192]	@ 0xc78


	// Same for thread2
	osKernelStackInit(2);
 80004aa:	2002      	movs	r0, #2
 80004ac:	f7ff ff0e 	bl	80002cc <osKernelStackInit>
	TCB_STACK[2][STACKSIZE - 2] =  (int32_t)(task2);
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	4a0a      	ldr	r2, [pc, #40]	@ (80004dc <osKernelAddThreads+0x70>)
 80004b4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80004b8:	f8c2 32b8 	str.w	r3, [r2, #696]	@ 0x2b8

	// Starts at thread0
	currentPt  = &tcbs[0];
 80004bc:	4b08      	ldr	r3, [pc, #32]	@ (80004e0 <osKernelAddThreads+0x74>)
 80004be:	4a04      	ldr	r2, [pc, #16]	@ (80004d0 <osKernelAddThreads+0x64>)
 80004c0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80004c2:	b662      	cpsie	i
}
 80004c4:	bf00      	nop

	// Enable global interrupts
	__enable_irq();

	return 1;
 80004c6:	2301      	movs	r3, #1
}
 80004c8:	4618      	mov	r0, r3
 80004ca:	3710      	adds	r7, #16
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	20000034 	.word	0x20000034
 80004d4:	2000003c 	.word	0x2000003c
 80004d8:	20000044 	.word	0x20000044
 80004dc:	20000050 	.word	0x20000050
 80004e0:	2000004c 	.word	0x2000004c

080004e4 <osKernelInit>:

void osKernelInit(void){
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
	MILLIS_PRESCALER  = (BUS_FREQ/1000);
 80004e8:	4b04      	ldr	r3, [pc, #16]	@ (80004fc <osKernelInit+0x18>)
 80004ea:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 80004ee:	601a      	str	r2, [r3, #0]
}
 80004f0:	bf00      	nop
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	20000030 	.word	0x20000030

08000500 <osKernelLaunch>:

void osKernelLaunch(uint32_t quanta){
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
	// Reset system tick
	SysTick->CTRL = SYSTICK_RST;
 8000508:	4b10      	ldr	r3, [pc, #64]	@ (800054c <osKernelLaunch+0x4c>)
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]

	// Clear system tick current value register
	SysTick->VAL = 0;
 800050e:	4b0f      	ldr	r3, [pc, #60]	@ (800054c <osKernelLaunch+0x4c>)
 8000510:	2200      	movs	r2, #0
 8000512:	609a      	str	r2, [r3, #8]

	// Load quanta
	SysTick->LOAD =  (quanta * MILLIS_PRESCALER) - 1;
 8000514:	4b0e      	ldr	r3, [pc, #56]	@ (8000550 <osKernelLaunch+0x50>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	687a      	ldr	r2, [r7, #4]
 800051a:	fb02 f303 	mul.w	r3, r2, r3
 800051e:	4a0b      	ldr	r2, [pc, #44]	@ (800054c <osKernelLaunch+0x4c>)
 8000520:	3b01      	subs	r3, #1
 8000522:	6053      	str	r3, [r2, #4]

	// Set system tick to low priority
	NVIC_SetPriority(SysTick_IRQn,15);
 8000524:	210f      	movs	r1, #15
 8000526:	f04f 30ff 	mov.w	r0, #4294967295
 800052a:	f7ff fea5 	bl	8000278 <__NVIC_SetPriority>

	// Enable system tick, select internal clock
	SysTick->CTRL  = CTRL_CLCKSRC | CTRL_ENABLE;
 800052e:	4b07      	ldr	r3, [pc, #28]	@ (800054c <osKernelLaunch+0x4c>)
 8000530:	2205      	movs	r2, #5
 8000532:	601a      	str	r2, [r3, #0]

	// Enable system tick interrupt
	SysTick->CTRL  |= CTRL_TICKINT;
 8000534:	4b05      	ldr	r3, [pc, #20]	@ (800054c <osKernelLaunch+0x4c>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a04      	ldr	r2, [pc, #16]	@ (800054c <osKernelLaunch+0x4c>)
 800053a:	f043 0302 	orr.w	r3, r3, #2
 800053e:	6013      	str	r3, [r2, #0]

	// Launch scheduler
	osSchedulerLaunch();
 8000540:	f000 f81e 	bl	8000580 <osSchedulerLaunch>
}
 8000544:	bf00      	nop
 8000546:	3708      	adds	r7, #8
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	e000e010 	.word	0xe000e010
 8000550:	20000030 	.word	0x20000030

08000554 <SysTick_Handler>:

__attribute__((naked)) void SysTick_Handler(void)
{
	// SUSPEND CURRENT THREAD
		// Disable global interrupts
		__asm("CPSID	I");
 8000554:	b672      	cpsid	i

		// Save r4,r5,r6,r7,r8,r9,r10,11
		__asm("PUSH  {R4-R11}");
 8000556:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

		// Load address of currentPt into r0
		__asm("LDR R0, =currentPt");
 800055a:	4808      	ldr	r0, [pc, #32]	@ (800057c <SysTick_Handler+0x28>)

		// r1 = currentPt
		__asm("LDR R1,[R0]");
 800055c:	6801      	ldr	r1, [r0, #0]

		// Save SP into tcb
		__asm("STR SP,[R1]");
 800055e:	f8c1 d000 	str.w	sp, [r1]

    // CHOOSE NEXT THREAD
		 __asm("PUSH	{R0,LR}");
 8000562:	b501      	push	{r0, lr}
		 __asm("BL		osSchedulerRoundRobin");
 8000564:	f000 f836 	bl	80005d4 <osSchedulerRoundRobin>
		 __asm("POP    {R0,LR}");
 8000568:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

	    // R1 =  currentPt
		 __asm("LDR		R1,[R0]");
 800056c:	6801      	ldr	r1, [r0, #0]

		// SP =  currentPt->stackPt
		__asm("LDR SP,[R1]");
 800056e:	f8d1 d000 	ldr.w	sp, [r1]

		// Restore r4,r5,r6,r7,r8,r9,r10,11
		__asm("POP {R4-R11}");
 8000572:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

		// Enable global interrupts
		__asm("CPSIE	I");
 8000576:	b662      	cpsie	i

		// Return from exception and restore r0,r1,r2,r3,r12,lr,pc,psr
		__asm("BX	LR");
 8000578:	4770      	bx	lr
}
 800057a:	bf00      	nop
 800057c:	2000004c 	.word	0x2000004c

08000580 <osSchedulerLaunch>:

void osSchedulerLaunch(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
	// Load address of currentPt into R0
	__asm("LDR R0,=currentPt");
 8000584:	4809      	ldr	r0, [pc, #36]	@ (80005ac <osSchedulerLaunch+0x2c>)

	// r2 = currentPt
	__asm("LDR R2,[r0]");
 8000586:	6802      	ldr	r2, [r0, #0]

	// SP = currentPt->stackPt
	__asm("LDR  SP,[R2]");
 8000588:	f8d2 d000 	ldr.w	sp, [r2]

	// Restore r4,r5,r6,r7,r8,r9,r10,r11
	__asm("POP {R4-R11}");
 800058c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

	// Restore r12
	__asm("POP {R12}");
 8000590:	f85d cb04 	ldr.w	ip, [sp], #4

	// Restore r0,r1,r2,r3
	__asm("POP	{R0-R3}");
 8000594:	bc0f      	pop	{r0, r1, r2, r3}

	// Skip LR
	__asm("ADD  SP,SP,#4");
 8000596:	b001      	add	sp, #4

	// Create a new start location by popping LR
	__asm("POP {LR}");
 8000598:	f85d eb04 	ldr.w	lr, [sp], #4

	// Skip PSR by adding 4 to SP
	__asm("ADD  SP,SP,#4");
 800059c:	b001      	add	sp, #4

	// Enable global interrupts
	__asm("CPSIE	I");
 800059e:	b662      	cpsie	i

	// Return from exception
	__asm("BX	LR");
 80005a0:	4770      	bx	lr
}
 80005a2:	bf00      	nop
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr
 80005ac:	2000004c 	.word	0x2000004c

080005b0 <osThreadYield>:

void osThreadYield(void){
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
	// Clear System tick current value register
	SysTick->VAL = 0;
 80005b4:	4b05      	ldr	r3, [pc, #20]	@ (80005cc <osThreadYield+0x1c>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	609a      	str	r2, [r3, #8]

	// Trigger SysTick
	INTCTRL = PENDSTSET;
 80005ba:	4b05      	ldr	r3, [pc, #20]	@ (80005d0 <osThreadYield+0x20>)
 80005bc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80005c0:	601a      	str	r2, [r3, #0]
}
 80005c2:	bf00      	nop
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr
 80005cc:	e000e010 	.word	0xe000e010
 80005d0:	e000ed04 	.word	0xe000ed04

080005d4 <osSchedulerRoundRobin>:

void osSchedulerRoundRobin(void){
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	if((++period_tick)  == PERIOD){
 80005d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000604 <osSchedulerRoundRobin+0x30>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	3301      	adds	r3, #1
 80005de:	4a09      	ldr	r2, [pc, #36]	@ (8000604 <osSchedulerRoundRobin+0x30>)
 80005e0:	6013      	str	r3, [r2, #0]
 80005e2:	4b08      	ldr	r3, [pc, #32]	@ (8000604 <osSchedulerRoundRobin+0x30>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	2b64      	cmp	r3, #100	@ 0x64
 80005e8:	d104      	bne.n	80005f4 <osSchedulerRoundRobin+0x20>
		(*task3)();
 80005ea:	f7ff fe1f 	bl	800022c <task3>
		period_tick = 0;
 80005ee:	4b05      	ldr	r3, [pc, #20]	@ (8000604 <osSchedulerRoundRobin+0x30>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
	}

	currentPt = currentPt->nextPt;
 80005f4:	4b04      	ldr	r3, [pc, #16]	@ (8000608 <osSchedulerRoundRobin+0x34>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	685b      	ldr	r3, [r3, #4]
 80005fa:	4a03      	ldr	r2, [pc, #12]	@ (8000608 <osSchedulerRoundRobin+0x34>)
 80005fc:	6013      	str	r3, [r2, #0]
}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	2000002c 	.word	0x2000002c
 8000608:	2000004c 	.word	0x2000004c

0800060c <uart_tx_init>:
int __io_putchar(int ch){
	uart_write(ch);
	return ch;
}

void uart_tx_init(void){
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
	// Enable clock access to GPIOA
	RCC->AHB1ENR |= GPIOAEN;
 8000610:	4b1f      	ldr	r3, [pc, #124]	@ (8000690 <uart_tx_init+0x84>)
 8000612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000614:	4a1e      	ldr	r2, [pc, #120]	@ (8000690 <uart_tx_init+0x84>)
 8000616:	f043 0301 	orr.w	r3, r3, #1
 800061a:	6313      	str	r3, [r2, #48]	@ 0x30

	// Set PA2 to alternate function mode
	GPIOA->MODER &=~ (1U<<4);
 800061c:	4b1d      	ldr	r3, [pc, #116]	@ (8000694 <uart_tx_init+0x88>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a1c      	ldr	r2, [pc, #112]	@ (8000694 <uart_tx_init+0x88>)
 8000622:	f023 0310 	bic.w	r3, r3, #16
 8000626:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 8000628:	4b1a      	ldr	r3, [pc, #104]	@ (8000694 <uart_tx_init+0x88>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a19      	ldr	r2, [pc, #100]	@ (8000694 <uart_tx_init+0x88>)
 800062e:	f043 0320 	orr.w	r3, r3, #32
 8000632:	6013      	str	r3, [r2, #0]

	//Set alternate function type to AF7 (UART2_TX)
	GPIOA->AFR[0] |= (1U<<8);
 8000634:	4b17      	ldr	r3, [pc, #92]	@ (8000694 <uart_tx_init+0x88>)
 8000636:	6a1b      	ldr	r3, [r3, #32]
 8000638:	4a16      	ldr	r2, [pc, #88]	@ (8000694 <uart_tx_init+0x88>)
 800063a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800063e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 8000640:	4b14      	ldr	r3, [pc, #80]	@ (8000694 <uart_tx_init+0x88>)
 8000642:	6a1b      	ldr	r3, [r3, #32]
 8000644:	4a13      	ldr	r2, [pc, #76]	@ (8000694 <uart_tx_init+0x88>)
 8000646:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800064a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 800064c:	4b11      	ldr	r3, [pc, #68]	@ (8000694 <uart_tx_init+0x88>)
 800064e:	6a1b      	ldr	r3, [r3, #32]
 8000650:	4a10      	ldr	r2, [pc, #64]	@ (8000694 <uart_tx_init+0x88>)
 8000652:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000656:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~ (1U<<11);
 8000658:	4b0e      	ldr	r3, [pc, #56]	@ (8000694 <uart_tx_init+0x88>)
 800065a:	6a1b      	ldr	r3, [r3, #32]
 800065c:	4a0d      	ldr	r2, [pc, #52]	@ (8000694 <uart_tx_init+0x88>)
 800065e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000662:	6213      	str	r3, [r2, #32]

	// Enable clock access to UART
	RCC->APB1ENR |= UART2EN;
 8000664:	4b0a      	ldr	r3, [pc, #40]	@ (8000690 <uart_tx_init+0x84>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000668:	4a09      	ldr	r2, [pc, #36]	@ (8000690 <uart_tx_init+0x84>)
 800066a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800066e:	6413      	str	r3, [r2, #64]	@ 0x40

	// Configure baud rate, either set directly or write a function
	uart_set_baudrate(APB1_CLK,UART_BAUDRATE);
 8000670:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8000674:	4808      	ldr	r0, [pc, #32]	@ (8000698 <uart_tx_init+0x8c>)
 8000676:	f000 f813 	bl	80006a0 <uart_set_baudrate>

	// Configure transfer direction
	USART2->CR1 = CR1_TE;
 800067a:	4b08      	ldr	r3, [pc, #32]	@ (800069c <uart_tx_init+0x90>)
 800067c:	2208      	movs	r2, #8
 800067e:	60da      	str	r2, [r3, #12]

	// Enable UART module
	USART2->CR1 |= CR1_UE;
 8000680:	4b06      	ldr	r3, [pc, #24]	@ (800069c <uart_tx_init+0x90>)
 8000682:	68db      	ldr	r3, [r3, #12]
 8000684:	4a05      	ldr	r2, [pc, #20]	@ (800069c <uart_tx_init+0x90>)
 8000686:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800068a:	60d3      	str	r3, [r2, #12]
}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40023800 	.word	0x40023800
 8000694:	40020000 	.word	0x40020000
 8000698:	00f42400 	.word	0x00f42400
 800069c:	40004400 	.word	0x40004400

080006a0 <uart_set_baudrate>:

	// Write to transmit data register
	 USART2->DR =  (ch & 0XFF);
}

static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate){
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	6039      	str	r1, [r7, #0]
	USART2->BRR = compute_uart_bd(periph_clk,baudrate);
 80006aa:	6839      	ldr	r1, [r7, #0]
 80006ac:	6878      	ldr	r0, [r7, #4]
 80006ae:	f000 f80b 	bl	80006c8 <compute_uart_bd>
 80006b2:	4603      	mov	r3, r0
 80006b4:	461a      	mov	r2, r3
 80006b6:	4b03      	ldr	r3, [pc, #12]	@ (80006c4 <uart_set_baudrate+0x24>)
 80006b8:	609a      	str	r2, [r3, #8]
}
 80006ba:	bf00      	nop
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40004400 	.word	0x40004400

080006c8 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate){
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	6039      	str	r1, [r7, #0]
	return ((periph_clk + (baudrate/2U))/baudrate);
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	085a      	lsrs	r2, r3, #1
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	441a      	add	r2, r3
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80006e0:	b29b      	uxth	r3, r3
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
	...

080006f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006f0:	480d      	ldr	r0, [pc, #52]	@ (8000728 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006f2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80006f4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006f8:	480c      	ldr	r0, [pc, #48]	@ (800072c <LoopForever+0x6>)
  ldr r1, =_edata
 80006fa:	490d      	ldr	r1, [pc, #52]	@ (8000730 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000734 <LoopForever+0xe>)
  movs r3, #0
 80006fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000700:	e002      	b.n	8000708 <LoopCopyDataInit>

08000702 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000702:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000704:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000706:	3304      	adds	r3, #4

08000708 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000708:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800070a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800070c:	d3f9      	bcc.n	8000702 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800070e:	4a0a      	ldr	r2, [pc, #40]	@ (8000738 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000710:	4c0a      	ldr	r4, [pc, #40]	@ (800073c <LoopForever+0x16>)
  movs r3, #0
 8000712:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000714:	e001      	b.n	800071a <LoopFillZerobss>

08000716 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000716:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000718:	3204      	adds	r2, #4

0800071a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800071a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800071c:	d3fb      	bcc.n	8000716 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800071e:	f000 f811 	bl	8000744 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000722:	f7ff fd91 	bl	8000248 <main>

08000726 <LoopForever>:

LoopForever:
    b LoopForever
 8000726:	e7fe      	b.n	8000726 <LoopForever>
  ldr   r0, =_estack
 8000728:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800072c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000730:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000734:	080007ac 	.word	0x080007ac
  ldr r2, =_sbss
 8000738:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800073c:	20001310 	.word	0x20001310

08000740 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000740:	e7fe      	b.n	8000740 <ADC_IRQHandler>
	...

08000744 <__libc_init_array>:
 8000744:	b570      	push	{r4, r5, r6, lr}
 8000746:	4d0d      	ldr	r5, [pc, #52]	@ (800077c <__libc_init_array+0x38>)
 8000748:	4c0d      	ldr	r4, [pc, #52]	@ (8000780 <__libc_init_array+0x3c>)
 800074a:	1b64      	subs	r4, r4, r5
 800074c:	10a4      	asrs	r4, r4, #2
 800074e:	2600      	movs	r6, #0
 8000750:	42a6      	cmp	r6, r4
 8000752:	d109      	bne.n	8000768 <__libc_init_array+0x24>
 8000754:	4d0b      	ldr	r5, [pc, #44]	@ (8000784 <__libc_init_array+0x40>)
 8000756:	4c0c      	ldr	r4, [pc, #48]	@ (8000788 <__libc_init_array+0x44>)
 8000758:	f000 f818 	bl	800078c <_init>
 800075c:	1b64      	subs	r4, r4, r5
 800075e:	10a4      	asrs	r4, r4, #2
 8000760:	2600      	movs	r6, #0
 8000762:	42a6      	cmp	r6, r4
 8000764:	d105      	bne.n	8000772 <__libc_init_array+0x2e>
 8000766:	bd70      	pop	{r4, r5, r6, pc}
 8000768:	f855 3b04 	ldr.w	r3, [r5], #4
 800076c:	4798      	blx	r3
 800076e:	3601      	adds	r6, #1
 8000770:	e7ee      	b.n	8000750 <__libc_init_array+0xc>
 8000772:	f855 3b04 	ldr.w	r3, [r5], #4
 8000776:	4798      	blx	r3
 8000778:	3601      	adds	r6, #1
 800077a:	e7f2      	b.n	8000762 <__libc_init_array+0x1e>
 800077c:	080007a4 	.word	0x080007a4
 8000780:	080007a4 	.word	0x080007a4
 8000784:	080007a4 	.word	0x080007a4
 8000788:	080007a8 	.word	0x080007a8

0800078c <_init>:
 800078c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800078e:	bf00      	nop
 8000790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000792:	bc08      	pop	{r3}
 8000794:	469e      	mov	lr, r3
 8000796:	4770      	bx	lr

08000798 <_fini>:
 8000798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800079a:	bf00      	nop
 800079c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800079e:	bc08      	pop	{r3}
 80007a0:	469e      	mov	lr, r3
 80007a2:	4770      	bx	lr
