
5_RoundRobinScheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000574  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800070c  08000714  00001714  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800070c  0800070c  00001714  2**0
                  CONTENTS
  4 .ARM          00000000  0800070c  0800070c  00001714  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800070c  08000714  00001714  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800070c  0800070c  0000170c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000710  08000710  00001710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00001714  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001308  20000000  08000714  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001308  08000714  00002308  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001714  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000d44  00000000  00000000  00001744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000049a  00000000  00000000  00002488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000110  00000000  00000000  00002928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000ba  00000000  00000000  00002a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000f7e  00000000  00000000  00002af2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000162e  00000000  00000000  00003a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00053798  00000000  00000000  0000509e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00058836  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000002cc  00000000  00000000  0005887c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00058b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080006f4 	.word	0x080006f4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	080006f4 	.word	0x080006f4

080001d8 <task0>:
void motor_run(void);
void motor_stop(void);
void valve_open(void);
void valve_close(void);

void task0(void){
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
	while(1){
		Task0_Profiler++;
 80001dc:	4b02      	ldr	r3, [pc, #8]	@ (80001e8 <task0+0x10>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	3301      	adds	r3, #1
 80001e2:	4a01      	ldr	r2, [pc, #4]	@ (80001e8 <task0+0x10>)
 80001e4:	6013      	str	r3, [r2, #0]
 80001e6:	e7f9      	b.n	80001dc <task0+0x4>
 80001e8:	2000001c 	.word	0x2000001c

080001ec <task1>:
//		motor_run();
	}
}


void task1(void){
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0
	while(1){
		Task1_Profiler++;
 80001f0:	4b02      	ldr	r3, [pc, #8]	@ (80001fc <task1+0x10>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	3301      	adds	r3, #1
 80001f6:	4a01      	ldr	r2, [pc, #4]	@ (80001fc <task1+0x10>)
 80001f8:	6013      	str	r3, [r2, #0]
 80001fa:	e7f9      	b.n	80001f0 <task1+0x4>
 80001fc:	20000020 	.word	0x20000020

08000200 <task2>:
//		valve_open();
	}
}

void task2(void){
 8000200:	b480      	push	{r7}
 8000202:	af00      	add	r7, sp, #0
	while(1){
		Task2_Profiler++;
 8000204:	4b02      	ldr	r3, [pc, #8]	@ (8000210 <task2+0x10>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	3301      	adds	r3, #1
 800020a:	4a01      	ldr	r2, [pc, #4]	@ (8000210 <task2+0x10>)
 800020c:	6013      	str	r3, [r2, #0]
 800020e:	e7f9      	b.n	8000204 <task2+0x4>
 8000210:	20000024 	.word	0x20000024

08000214 <main>:
	}
}

int main(void){
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
	uart_tx_init();
 8000218:	f000 f9ac 	bl	8000574 <uart_tx_init>
	osKernelInit();
 800021c:	f000 f948 	bl	80004b0 <osKernelInit>
	osKernelAddThreads(&task0,&task1,&task2);
 8000220:	4a05      	ldr	r2, [pc, #20]	@ (8000238 <main+0x24>)
 8000222:	4906      	ldr	r1, [pc, #24]	@ (800023c <main+0x28>)
 8000224:	4806      	ldr	r0, [pc, #24]	@ (8000240 <main+0x2c>)
 8000226:	f000 f907 	bl	8000438 <osKernelAddThreads>
	osKernelLaunch(QUANTA);
 800022a:	200a      	movs	r0, #10
 800022c:	f000 f94e 	bl	80004cc <osKernelLaunch>
 8000230:	2300      	movs	r3, #0
}
 8000232:	4618      	mov	r0, r3
 8000234:	bd80      	pop	{r7, pc}
 8000236:	bf00      	nop
 8000238:	08000201 	.word	0x08000201
 800023c:	080001ed 	.word	0x080001ed
 8000240:	080001d9 	.word	0x080001d9

08000244 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000244:	b480      	push	{r7}
 8000246:	b083      	sub	sp, #12
 8000248:	af00      	add	r7, sp, #0
 800024a:	4603      	mov	r3, r0
 800024c:	6039      	str	r1, [r7, #0]
 800024e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000254:	2b00      	cmp	r3, #0
 8000256:	db0a      	blt.n	800026e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000258:	683b      	ldr	r3, [r7, #0]
 800025a:	b2da      	uxtb	r2, r3
 800025c:	490c      	ldr	r1, [pc, #48]	@ (8000290 <__NVIC_SetPriority+0x4c>)
 800025e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000262:	0112      	lsls	r2, r2, #4
 8000264:	b2d2      	uxtb	r2, r2
 8000266:	440b      	add	r3, r1
 8000268:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800026c:	e00a      	b.n	8000284 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800026e:	683b      	ldr	r3, [r7, #0]
 8000270:	b2da      	uxtb	r2, r3
 8000272:	4908      	ldr	r1, [pc, #32]	@ (8000294 <__NVIC_SetPriority+0x50>)
 8000274:	79fb      	ldrb	r3, [r7, #7]
 8000276:	f003 030f 	and.w	r3, r3, #15
 800027a:	3b04      	subs	r3, #4
 800027c:	0112      	lsls	r2, r2, #4
 800027e:	b2d2      	uxtb	r2, r2
 8000280:	440b      	add	r3, r1
 8000282:	761a      	strb	r2, [r3, #24]
}
 8000284:	bf00      	nop
 8000286:	370c      	adds	r7, #12
 8000288:	46bd      	mov	sp, r7
 800028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028e:	4770      	bx	lr
 8000290:	e000e100 	.word	0xe000e100
 8000294:	e000ed00 	.word	0xe000ed00

08000298 <osKernelStackInit>:

// Each thread will have stack size of 400bytes
int32_t TCB_STACK[NUM_OF_THREADS][STACKSIZE];

void osKernelStackInit(int i)
{
 8000298:	b480      	push	{r7}
 800029a:	b083      	sub	sp, #12
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
	tcbs[i].stackPt =  &TCB_STACK[i][STACKSIZE - 16]; // Stack Pointer
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80002a6:	fb02 f303 	mul.w	r3, r2, r3
 80002aa:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 80002ae:	4a60      	ldr	r2, [pc, #384]	@ (8000430 <osKernelStackInit+0x198>)
 80002b0:	441a      	add	r2, r3
 80002b2:	4960      	ldr	r1, [pc, #384]	@ (8000434 <osKernelStackInit+0x19c>)
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]

	// Set bit21 in PSR to 1 for thumb mode
	TCB_STACK[i][STACKSIZE - 1] =  (1U<<24);
 80002ba:	4a5d      	ldr	r2, [pc, #372]	@ (8000430 <osKernelStackInit+0x198>)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80002c2:	fb01 f303 	mul.w	r3, r1, r3
 80002c6:	4413      	add	r3, r2
 80002c8:	f203 633c 	addw	r3, r3, #1596	@ 0x63c
 80002cc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80002d0:	601a      	str	r2, [r3, #0]

	// Block below is optional/for debugging purpose only
	// Dummy stack content
	TCB_STACK[i][STACKSIZE-3]  = 0xAAAAAAAA;    // R14
 80002d2:	4a57      	ldr	r2, [pc, #348]	@ (8000430 <osKernelStackInit+0x198>)
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80002da:	fb01 f303 	mul.w	r3, r1, r3
 80002de:	4413      	add	r3, r2
 80002e0:	f203 6334 	addw	r3, r3, #1588	@ 0x634
 80002e4:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80002e8:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-4]  = 0xAAAAAAAA;    // R12
 80002ea:	4a51      	ldr	r2, [pc, #324]	@ (8000430 <osKernelStackInit+0x198>)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80002f2:	fb01 f303 	mul.w	r3, r1, r3
 80002f6:	4413      	add	r3, r2
 80002f8:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 80002fc:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000300:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-5]  = 0xAAAAAAAA;    // R3
 8000302:	4a4b      	ldr	r2, [pc, #300]	@ (8000430 <osKernelStackInit+0x198>)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 800030a:	fb01 f303 	mul.w	r3, r1, r3
 800030e:	4413      	add	r3, r2
 8000310:	f203 632c 	addw	r3, r3, #1580	@ 0x62c
 8000314:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000318:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-6]  = 0xAAAAAAAA;    // R2
 800031a:	4a45      	ldr	r2, [pc, #276]	@ (8000430 <osKernelStackInit+0x198>)
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8000322:	fb01 f303 	mul.w	r3, r1, r3
 8000326:	4413      	add	r3, r2
 8000328:	f503 63c5 	add.w	r3, r3, #1576	@ 0x628
 800032c:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000330:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-7]  = 0xAAAAAAAA;    // R1
 8000332:	4a3f      	ldr	r2, [pc, #252]	@ (8000430 <osKernelStackInit+0x198>)
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 800033a:	fb01 f303 	mul.w	r3, r1, r3
 800033e:	4413      	add	r3, r2
 8000340:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 8000344:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000348:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-8]  = 0xAAAAAAAA;    // R0
 800034a:	4a39      	ldr	r2, [pc, #228]	@ (8000430 <osKernelStackInit+0x198>)
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8000352:	fb01 f303 	mul.w	r3, r1, r3
 8000356:	4413      	add	r3, r2
 8000358:	f503 63c4 	add.w	r3, r3, #1568	@ 0x620
 800035c:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000360:	601a      	str	r2, [r3, #0]

	TCB_STACK[i][STACKSIZE-9]  = 0xAAAAAAAA;    // R11
 8000362:	4a33      	ldr	r2, [pc, #204]	@ (8000430 <osKernelStackInit+0x198>)
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 800036a:	fb01 f303 	mul.w	r3, r1, r3
 800036e:	4413      	add	r3, r2
 8000370:	f203 631c 	addw	r3, r3, #1564	@ 0x61c
 8000374:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000378:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-10] = 0xAAAAAAAA;   // R10
 800037a:	4a2d      	ldr	r2, [pc, #180]	@ (8000430 <osKernelStackInit+0x198>)
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8000382:	fb01 f303 	mul.w	r3, r1, r3
 8000386:	4413      	add	r3, r2
 8000388:	f503 63c3 	add.w	r3, r3, #1560	@ 0x618
 800038c:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000390:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-11] = 0xAAAAAAAA;   // R9
 8000392:	4a27      	ldr	r2, [pc, #156]	@ (8000430 <osKernelStackInit+0x198>)
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 800039a:	fb01 f303 	mul.w	r3, r1, r3
 800039e:	4413      	add	r3, r2
 80003a0:	f203 6314 	addw	r3, r3, #1556	@ 0x614
 80003a4:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80003a8:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-12] = 0xAAAAAAAA;   // R8
 80003aa:	4a21      	ldr	r2, [pc, #132]	@ (8000430 <osKernelStackInit+0x198>)
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80003b2:	fb01 f303 	mul.w	r3, r1, r3
 80003b6:	4413      	add	r3, r2
 80003b8:	f503 63c2 	add.w	r3, r3, #1552	@ 0x610
 80003bc:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80003c0:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-13] = 0xAAAAAAAA;   // R7
 80003c2:	4a1b      	ldr	r2, [pc, #108]	@ (8000430 <osKernelStackInit+0x198>)
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80003ca:	fb01 f303 	mul.w	r3, r1, r3
 80003ce:	4413      	add	r3, r2
 80003d0:	f203 630c 	addw	r3, r3, #1548	@ 0x60c
 80003d4:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80003d8:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-14] = 0xAAAAAAAA;   // R6
 80003da:	4a15      	ldr	r2, [pc, #84]	@ (8000430 <osKernelStackInit+0x198>)
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80003e2:	fb01 f303 	mul.w	r3, r1, r3
 80003e6:	4413      	add	r3, r2
 80003e8:	f503 63c1 	add.w	r3, r3, #1544	@ 0x608
 80003ec:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80003f0:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-15] = 0xAAAAAAAA;   // R5
 80003f2:	4a0f      	ldr	r2, [pc, #60]	@ (8000430 <osKernelStackInit+0x198>)
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80003fa:	fb01 f303 	mul.w	r3, r1, r3
 80003fe:	4413      	add	r3, r2
 8000400:	f203 6304 	addw	r3, r3, #1540	@ 0x604
 8000404:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000408:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-16] = 0xAAAAAAAA;   // R4
 800040a:	4a09      	ldr	r2, [pc, #36]	@ (8000430 <osKernelStackInit+0x198>)
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8000412:	fb01 f303 	mul.w	r3, r1, r3
 8000416:	4413      	add	r3, r2
 8000418:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 800041c:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000420:	601a      	str	r2, [r3, #0]
}
 8000422:	bf00      	nop
 8000424:	370c      	adds	r7, #12
 8000426:	46bd      	mov	sp, r7
 8000428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	20000048 	.word	0x20000048
 8000434:	2000002c 	.word	0x2000002c

08000438 <osKernelAddThreads>:

uint8_t osKernelAddThreads(void(*task0)(void),void(*task1)(void),void(*task2)(void))
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b084      	sub	sp, #16
 800043c:	af00      	add	r7, sp, #0
 800043e:	60f8      	str	r0, [r7, #12]
 8000440:	60b9      	str	r1, [r7, #8]
 8000442:	607a      	str	r2, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000444:	b672      	cpsid	i
}
 8000446:	bf00      	nop
	// Disable global interrupts
	__disable_irq();
	tcbs[0].nextPt =  &tcbs[1];
 8000448:	4b14      	ldr	r3, [pc, #80]	@ (800049c <osKernelAddThreads+0x64>)
 800044a:	4a15      	ldr	r2, [pc, #84]	@ (80004a0 <osKernelAddThreads+0x68>)
 800044c:	605a      	str	r2, [r3, #4]
	tcbs[1].nextPt =  &tcbs[2];
 800044e:	4b13      	ldr	r3, [pc, #76]	@ (800049c <osKernelAddThreads+0x64>)
 8000450:	4a14      	ldr	r2, [pc, #80]	@ (80004a4 <osKernelAddThreads+0x6c>)
 8000452:	60da      	str	r2, [r3, #12]
	tcbs[2].nextPt =  &tcbs[0];
 8000454:	4b11      	ldr	r3, [pc, #68]	@ (800049c <osKernelAddThreads+0x64>)
 8000456:	4a11      	ldr	r2, [pc, #68]	@ (800049c <osKernelAddThreads+0x64>)
 8000458:	615a      	str	r2, [r3, #20]

	// Initial stack for thread0
	osKernelStackInit(0);
 800045a:	2000      	movs	r0, #0
 800045c:	f7ff ff1c 	bl	8000298 <osKernelStackInit>

	// Initial PC
	TCB_STACK[0][STACKSIZE - 2] =  (int32_t)(task0);
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	4a11      	ldr	r2, [pc, #68]	@ (80004a8 <osKernelAddThreads+0x70>)
 8000464:	f8c2 3638 	str.w	r3, [r2, #1592]	@ 0x638

	// Same for thread1
	osKernelStackInit(1);
 8000468:	2001      	movs	r0, #1
 800046a:	f7ff ff15 	bl	8000298 <osKernelStackInit>
	TCB_STACK[1][STACKSIZE - 2] =  (int32_t)(task1);
 800046e:	68bb      	ldr	r3, [r7, #8]
 8000470:	4a0d      	ldr	r2, [pc, #52]	@ (80004a8 <osKernelAddThreads+0x70>)
 8000472:	f8c2 3c78 	str.w	r3, [r2, #3192]	@ 0xc78


	// Same for thread2
	osKernelStackInit(2);
 8000476:	2002      	movs	r0, #2
 8000478:	f7ff ff0e 	bl	8000298 <osKernelStackInit>
	TCB_STACK[2][STACKSIZE - 2] =  (int32_t)(task2);
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	4a0a      	ldr	r2, [pc, #40]	@ (80004a8 <osKernelAddThreads+0x70>)
 8000480:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8000484:	f8c2 32b8 	str.w	r3, [r2, #696]	@ 0x2b8

	// Starts at thread0
	currentPt  = &tcbs[0];
 8000488:	4b08      	ldr	r3, [pc, #32]	@ (80004ac <osKernelAddThreads+0x74>)
 800048a:	4a04      	ldr	r2, [pc, #16]	@ (800049c <osKernelAddThreads+0x64>)
 800048c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800048e:	b662      	cpsie	i
}
 8000490:	bf00      	nop

	// Enable global interrupts
	__enable_irq();

	return 1;
 8000492:	2301      	movs	r3, #1
}
 8000494:	4618      	mov	r0, r3
 8000496:	3710      	adds	r7, #16
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}
 800049c:	2000002c 	.word	0x2000002c
 80004a0:	20000034 	.word	0x20000034
 80004a4:	2000003c 	.word	0x2000003c
 80004a8:	20000048 	.word	0x20000048
 80004ac:	20000044 	.word	0x20000044

080004b0 <osKernelInit>:

void osKernelInit(void){
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
	MILLIS_PRESCALER  = (BUS_FREQ/1000);
 80004b4:	4b04      	ldr	r3, [pc, #16]	@ (80004c8 <osKernelInit+0x18>)
 80004b6:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 80004ba:	601a      	str	r2, [r3, #0]
}
 80004bc:	bf00      	nop
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop
 80004c8:	20000028 	.word	0x20000028

080004cc <osKernelLaunch>:

void osKernelLaunch(uint32_t quanta){
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	// Reset system tick
	SysTick->CTRL = SYSTICK_RST;
 80004d4:	4b10      	ldr	r3, [pc, #64]	@ (8000518 <osKernelLaunch+0x4c>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]

	// Clear system tick current value register
	SysTick->VAL = 0;
 80004da:	4b0f      	ldr	r3, [pc, #60]	@ (8000518 <osKernelLaunch+0x4c>)
 80004dc:	2200      	movs	r2, #0
 80004de:	609a      	str	r2, [r3, #8]

	// Load quanta
	SysTick->LOAD =  (quanta * MILLIS_PRESCALER) - 1;
 80004e0:	4b0e      	ldr	r3, [pc, #56]	@ (800051c <osKernelLaunch+0x50>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	687a      	ldr	r2, [r7, #4]
 80004e6:	fb02 f303 	mul.w	r3, r2, r3
 80004ea:	4a0b      	ldr	r2, [pc, #44]	@ (8000518 <osKernelLaunch+0x4c>)
 80004ec:	3b01      	subs	r3, #1
 80004ee:	6053      	str	r3, [r2, #4]

	// Set system tick to low priority
	NVIC_SetPriority(SysTick_IRQn,15);
 80004f0:	210f      	movs	r1, #15
 80004f2:	f04f 30ff 	mov.w	r0, #4294967295
 80004f6:	f7ff fea5 	bl	8000244 <__NVIC_SetPriority>

	// Enable system tick, select internal clock
	SysTick->CTRL  = CTRL_CLCKSRC | CTRL_ENABLE;
 80004fa:	4b07      	ldr	r3, [pc, #28]	@ (8000518 <osKernelLaunch+0x4c>)
 80004fc:	2205      	movs	r2, #5
 80004fe:	601a      	str	r2, [r3, #0]

	// Enable system tick interrupt
	SysTick->CTRL  |= CTRL_TICKINT;
 8000500:	4b05      	ldr	r3, [pc, #20]	@ (8000518 <osKernelLaunch+0x4c>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a04      	ldr	r2, [pc, #16]	@ (8000518 <osKernelLaunch+0x4c>)
 8000506:	f043 0302 	orr.w	r3, r3, #2
 800050a:	6013      	str	r3, [r2, #0]

	// Launch scheduler
	osSchedulerLaunch();
 800050c:	f000 f81a 	bl	8000544 <osSchedulerLaunch>
}
 8000510:	bf00      	nop
 8000512:	3708      	adds	r7, #8
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	e000e010 	.word	0xe000e010
 800051c:	20000028 	.word	0x20000028

08000520 <SysTick_Handler>:

__attribute__((naked)) void SysTick_Handler(void)
{
	// SUSPEND CURRENT THREAD
		// Disable global interrupts
		__asm("CPSID	I");
 8000520:	b672      	cpsid	i

		// Save r4,r5,r6,r7,r8,r9,r10,11
		__asm("PUSH  {R4-R11}");
 8000522:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

		// Load address of currentPt into r0
		__asm("LDR R0, =currentPt");
 8000526:	4806      	ldr	r0, [pc, #24]	@ (8000540 <SysTick_Handler+0x20>)

		// r1 = currentPt
		__asm("LDR R1,[R0]");
 8000528:	6801      	ldr	r1, [r0, #0]

		// Save SP into tcb
		__asm("STR SP,[R1]");
 800052a:	f8c1 d000 	str.w	sp, [r1]

    // CHOOSE NEXT THREAD
		// r1 = currentPt->next
		__asm("LDR R1,[R1,#4]");
 800052e:	6849      	ldr	r1, [r1, #4]

		// currentPt =  r1
		__asm("STR	R1,[R0]");
 8000530:	6001      	str	r1, [r0, #0]

		// SP =  currentPt->stackPt
		__asm("LDR SP,[R1]");
 8000532:	f8d1 d000 	ldr.w	sp, [r1]

		// Restore r4,r5,r6,r7,r8,r9,r10,11
		__asm("POP {R4-R11}");
 8000536:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

		// Enable global interrupts
		__asm("CPSIE	I");
 800053a:	b662      	cpsie	i

		// Return from exception and restore r0,r1,r2,r3,r12,lr,pc,psr
		__asm("BX	LR");
 800053c:	4770      	bx	lr
}
 800053e:	bf00      	nop
 8000540:	20000044 	.word	0x20000044

08000544 <osSchedulerLaunch>:

void osSchedulerLaunch(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
	// Load address of currentPt into R0
	__asm("LDR R0,=currentPt");
 8000548:	4809      	ldr	r0, [pc, #36]	@ (8000570 <osSchedulerLaunch+0x2c>)

	// r2 = currentPt
	__asm("LDR R2,[r0]");
 800054a:	6802      	ldr	r2, [r0, #0]

	// SP = currentPt->stackPt
	__asm("LDR  SP,[R2]");
 800054c:	f8d2 d000 	ldr.w	sp, [r2]

	// Restore r4,r5,r6,r7,r8,r9,r10,r11
	__asm("POP {R4-R11}");
 8000550:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

	// Restore r12
	__asm("POP {R12}");
 8000554:	f85d cb04 	ldr.w	ip, [sp], #4

	// Restore r0,r1,r2,r3
	__asm("POP	{R0-R3}");
 8000558:	bc0f      	pop	{r0, r1, r2, r3}

	// Skip LR
	__asm("ADD  SP,SP,#4");
 800055a:	b001      	add	sp, #4

	// Create a new start location by popping LR
	__asm("POP {LR}");
 800055c:	f85d eb04 	ldr.w	lr, [sp], #4

	// Skip PSR by adding 4 to SP
	__asm("ADD  SP,SP,#4");
 8000560:	b001      	add	sp, #4

	// Enable global interrupts
	__asm("CPSIE	I");
 8000562:	b662      	cpsie	i

	// Return from exception
	__asm("BX	LR");
 8000564:	4770      	bx	lr
}
 8000566:	bf00      	nop
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr
 8000570:	20000044 	.word	0x20000044

08000574 <uart_tx_init>:
int __io_putchar(int ch){
	uart_write(ch);
	return ch;
}

void uart_tx_init(void){
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
	// Enable clock access to GPIOA
	RCC->AHB1ENR |= GPIOAEN;
 8000578:	4b1f      	ldr	r3, [pc, #124]	@ (80005f8 <uart_tx_init+0x84>)
 800057a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057c:	4a1e      	ldr	r2, [pc, #120]	@ (80005f8 <uart_tx_init+0x84>)
 800057e:	f043 0301 	orr.w	r3, r3, #1
 8000582:	6313      	str	r3, [r2, #48]	@ 0x30

	// Set PA2 to alternate function mode
	GPIOA->MODER &=~ (1U<<4);
 8000584:	4b1d      	ldr	r3, [pc, #116]	@ (80005fc <uart_tx_init+0x88>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a1c      	ldr	r2, [pc, #112]	@ (80005fc <uart_tx_init+0x88>)
 800058a:	f023 0310 	bic.w	r3, r3, #16
 800058e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 8000590:	4b1a      	ldr	r3, [pc, #104]	@ (80005fc <uart_tx_init+0x88>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a19      	ldr	r2, [pc, #100]	@ (80005fc <uart_tx_init+0x88>)
 8000596:	f043 0320 	orr.w	r3, r3, #32
 800059a:	6013      	str	r3, [r2, #0]

	//Set alternate function type to AF7 (UART2_TX)
	GPIOA->AFR[0] |= (1U<<8);
 800059c:	4b17      	ldr	r3, [pc, #92]	@ (80005fc <uart_tx_init+0x88>)
 800059e:	6a1b      	ldr	r3, [r3, #32]
 80005a0:	4a16      	ldr	r2, [pc, #88]	@ (80005fc <uart_tx_init+0x88>)
 80005a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005a6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 80005a8:	4b14      	ldr	r3, [pc, #80]	@ (80005fc <uart_tx_init+0x88>)
 80005aa:	6a1b      	ldr	r3, [r3, #32]
 80005ac:	4a13      	ldr	r2, [pc, #76]	@ (80005fc <uart_tx_init+0x88>)
 80005ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80005b2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 80005b4:	4b11      	ldr	r3, [pc, #68]	@ (80005fc <uart_tx_init+0x88>)
 80005b6:	6a1b      	ldr	r3, [r3, #32]
 80005b8:	4a10      	ldr	r2, [pc, #64]	@ (80005fc <uart_tx_init+0x88>)
 80005ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80005be:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~ (1U<<11);
 80005c0:	4b0e      	ldr	r3, [pc, #56]	@ (80005fc <uart_tx_init+0x88>)
 80005c2:	6a1b      	ldr	r3, [r3, #32]
 80005c4:	4a0d      	ldr	r2, [pc, #52]	@ (80005fc <uart_tx_init+0x88>)
 80005c6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80005ca:	6213      	str	r3, [r2, #32]

	// Enable clock access to UART
	RCC->APB1ENR |= UART2EN;
 80005cc:	4b0a      	ldr	r3, [pc, #40]	@ (80005f8 <uart_tx_init+0x84>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d0:	4a09      	ldr	r2, [pc, #36]	@ (80005f8 <uart_tx_init+0x84>)
 80005d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005d6:	6413      	str	r3, [r2, #64]	@ 0x40

	// Configure baud rate, either set directly or write a function
	uart_set_baudrate(APB1_CLK,UART_BAUDRATE);
 80005d8:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 80005dc:	4808      	ldr	r0, [pc, #32]	@ (8000600 <uart_tx_init+0x8c>)
 80005de:	f000 f813 	bl	8000608 <uart_set_baudrate>

	// Configure transfer direction
	USART2->CR1 = CR1_TE;
 80005e2:	4b08      	ldr	r3, [pc, #32]	@ (8000604 <uart_tx_init+0x90>)
 80005e4:	2208      	movs	r2, #8
 80005e6:	60da      	str	r2, [r3, #12]

	// Enable UART module
	USART2->CR1 |= CR1_UE;
 80005e8:	4b06      	ldr	r3, [pc, #24]	@ (8000604 <uart_tx_init+0x90>)
 80005ea:	68db      	ldr	r3, [r3, #12]
 80005ec:	4a05      	ldr	r2, [pc, #20]	@ (8000604 <uart_tx_init+0x90>)
 80005ee:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80005f2:	60d3      	str	r3, [r2, #12]
}
 80005f4:	bf00      	nop
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40023800 	.word	0x40023800
 80005fc:	40020000 	.word	0x40020000
 8000600:	00f42400 	.word	0x00f42400
 8000604:	40004400 	.word	0x40004400

08000608 <uart_set_baudrate>:

	// Write to transmit data register
	 USART2->DR =  (ch & 0XFF);
}

static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate){
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	6039      	str	r1, [r7, #0]
	USART2->BRR = compute_uart_bd(periph_clk,baudrate);
 8000612:	6839      	ldr	r1, [r7, #0]
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f000 f80b 	bl	8000630 <compute_uart_bd>
 800061a:	4603      	mov	r3, r0
 800061c:	461a      	mov	r2, r3
 800061e:	4b03      	ldr	r3, [pc, #12]	@ (800062c <uart_set_baudrate+0x24>)
 8000620:	609a      	str	r2, [r3, #8]
}
 8000622:	bf00      	nop
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40004400 	.word	0x40004400

08000630 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate){
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	6039      	str	r1, [r7, #0]
	return ((periph_clk + (baudrate/2U))/baudrate);
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	085a      	lsrs	r2, r3, #1
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	441a      	add	r2, r3
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	fbb2 f3f3 	udiv	r3, r2, r3
 8000648:	b29b      	uxth	r3, r3
}
 800064a:	4618      	mov	r0, r3
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
	...

08000658 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000658:	480d      	ldr	r0, [pc, #52]	@ (8000690 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800065a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800065c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000660:	480c      	ldr	r0, [pc, #48]	@ (8000694 <LoopForever+0x6>)
  ldr r1, =_edata
 8000662:	490d      	ldr	r1, [pc, #52]	@ (8000698 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000664:	4a0d      	ldr	r2, [pc, #52]	@ (800069c <LoopForever+0xe>)
  movs r3, #0
 8000666:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000668:	e002      	b.n	8000670 <LoopCopyDataInit>

0800066a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800066a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800066c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800066e:	3304      	adds	r3, #4

08000670 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000670:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000672:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000674:	d3f9      	bcc.n	800066a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000676:	4a0a      	ldr	r2, [pc, #40]	@ (80006a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000678:	4c0a      	ldr	r4, [pc, #40]	@ (80006a4 <LoopForever+0x16>)
  movs r3, #0
 800067a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800067c:	e001      	b.n	8000682 <LoopFillZerobss>

0800067e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800067e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000680:	3204      	adds	r2, #4

08000682 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000682:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000684:	d3fb      	bcc.n	800067e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000686:	f000 f811 	bl	80006ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800068a:	f7ff fdc3 	bl	8000214 <main>

0800068e <LoopForever>:

LoopForever:
    b LoopForever
 800068e:	e7fe      	b.n	800068e <LoopForever>
  ldr   r0, =_estack
 8000690:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000694:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000698:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800069c:	08000714 	.word	0x08000714
  ldr r2, =_sbss
 80006a0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80006a4:	20001308 	.word	0x20001308

080006a8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006a8:	e7fe      	b.n	80006a8 <ADC_IRQHandler>
	...

080006ac <__libc_init_array>:
 80006ac:	b570      	push	{r4, r5, r6, lr}
 80006ae:	4d0d      	ldr	r5, [pc, #52]	@ (80006e4 <__libc_init_array+0x38>)
 80006b0:	4c0d      	ldr	r4, [pc, #52]	@ (80006e8 <__libc_init_array+0x3c>)
 80006b2:	1b64      	subs	r4, r4, r5
 80006b4:	10a4      	asrs	r4, r4, #2
 80006b6:	2600      	movs	r6, #0
 80006b8:	42a6      	cmp	r6, r4
 80006ba:	d109      	bne.n	80006d0 <__libc_init_array+0x24>
 80006bc:	4d0b      	ldr	r5, [pc, #44]	@ (80006ec <__libc_init_array+0x40>)
 80006be:	4c0c      	ldr	r4, [pc, #48]	@ (80006f0 <__libc_init_array+0x44>)
 80006c0:	f000 f818 	bl	80006f4 <_init>
 80006c4:	1b64      	subs	r4, r4, r5
 80006c6:	10a4      	asrs	r4, r4, #2
 80006c8:	2600      	movs	r6, #0
 80006ca:	42a6      	cmp	r6, r4
 80006cc:	d105      	bne.n	80006da <__libc_init_array+0x2e>
 80006ce:	bd70      	pop	{r4, r5, r6, pc}
 80006d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80006d4:	4798      	blx	r3
 80006d6:	3601      	adds	r6, #1
 80006d8:	e7ee      	b.n	80006b8 <__libc_init_array+0xc>
 80006da:	f855 3b04 	ldr.w	r3, [r5], #4
 80006de:	4798      	blx	r3
 80006e0:	3601      	adds	r6, #1
 80006e2:	e7f2      	b.n	80006ca <__libc_init_array+0x1e>
 80006e4:	0800070c 	.word	0x0800070c
 80006e8:	0800070c 	.word	0x0800070c
 80006ec:	0800070c 	.word	0x0800070c
 80006f0:	08000710 	.word	0x08000710

080006f4 <_init>:
 80006f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006f6:	bf00      	nop
 80006f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006fa:	bc08      	pop	{r3}
 80006fc:	469e      	mov	lr, r3
 80006fe:	4770      	bx	lr

08000700 <_fini>:
 8000700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000702:	bf00      	nop
 8000704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000706:	bc08      	pop	{r3}
 8000708:	469e      	mov	lr, r3
 800070a:	4770      	bx	lr
