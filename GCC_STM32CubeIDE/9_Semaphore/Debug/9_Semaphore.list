
9_Semaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000017f8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08001998  08001998  00002998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a2c  08001a2c  0000305c  2**0
                  CONTENTS
  4 .ARM          00000008  08001a2c  08001a2c  00002a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001a34  08001a34  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a34  08001a34  00002a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001a38  08001a38  00002a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08001a3c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000146c  2000005c  08001a98  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200014c8  08001a98  000034c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001be1  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000077e  00000000  00000000  00004c6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000220  00000000  00000000  000053f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000017c  00000000  00000000  00005610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002175  00000000  00000000  0000578c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002623  00000000  00000000  00007901  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055a61  00000000  00000000  00009f24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0005f985  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e94  00000000  00000000  0005f9c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0006085c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001980 	.word	0x08001980

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08001980 	.word	0x08001980

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <task0>:
void motor_run(void);
void motor_stop(void);
void valve_open(void);
void valve_close(void);

void task0(void){
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	while(1){
		Task0_Profiler++;
 8000284:	4b04      	ldr	r3, [pc, #16]	@ (8000298 <task0+0x18>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	3301      	adds	r3, #1
 800028a:	4a03      	ldr	r2, [pc, #12]	@ (8000298 <task0+0x18>)
 800028c:	6013      	str	r3, [r2, #0]
		osThreadYield();
 800028e:	f000 fa4f 	bl	8000730 <osThreadYield>
		Task0_Profiler++;
 8000292:	bf00      	nop
 8000294:	e7f6      	b.n	8000284 <task0+0x4>
 8000296:	bf00      	nop
 8000298:	20000078 	.word	0x20000078

0800029c <task1>:
	}
}


void task1(void){
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	while(1){
		Task1_Profiler++;
 80002a0:	4b08      	ldr	r3, [pc, #32]	@ (80002c4 <task1+0x28>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	3301      	adds	r3, #1
 80002a6:	4a07      	ldr	r2, [pc, #28]	@ (80002c4 <task1+0x28>)
 80002a8:	6013      	str	r3, [r2, #0]
		osThreadYield();
 80002aa:	f000 fa41 	bl	8000730 <osThreadYield>
		osSemaphoreWait(&semaphore1);
 80002ae:	4806      	ldr	r0, [pc, #24]	@ (80002c8 <task1+0x2c>)
 80002b0:	f000 fab7 	bl	8000822 <osSemaphoreWait>
		motor_run();
 80002b4:	f000 f86e 	bl	8000394 <motor_run>
		osSemaphoreSet(&semaphore2);
 80002b8:	4804      	ldr	r0, [pc, #16]	@ (80002cc <task1+0x30>)
 80002ba:	f000 fa9f 	bl	80007fc <osSemaphoreSet>
		Task1_Profiler++;
 80002be:	bf00      	nop
 80002c0:	e7ee      	b.n	80002a0 <task1+0x4>
 80002c2:	bf00      	nop
 80002c4:	2000007c 	.word	0x2000007c
 80002c8:	2000008c 	.word	0x2000008c
 80002cc:	20000090 	.word	0x20000090

080002d0 <task2>:
	}
}

void task2(void){
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
	while(1){
		Task2_Profiler++;
 80002d4:	4b07      	ldr	r3, [pc, #28]	@ (80002f4 <task2+0x24>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	3301      	adds	r3, #1
 80002da:	4a06      	ldr	r2, [pc, #24]	@ (80002f4 <task2+0x24>)
 80002dc:	6013      	str	r3, [r2, #0]
		osSemaphoreWait(&semaphore2);
 80002de:	4806      	ldr	r0, [pc, #24]	@ (80002f8 <task2+0x28>)
 80002e0:	f000 fa9f 	bl	8000822 <osSemaphoreWait>
		valve_open();
 80002e4:	f000 f860 	bl	80003a8 <valve_open>
		osSemaphoreSet(&semaphore1);
 80002e8:	4804      	ldr	r0, [pc, #16]	@ (80002fc <task2+0x2c>)
 80002ea:	f000 fa87 	bl	80007fc <osSemaphoreSet>
		Task2_Profiler++;
 80002ee:	bf00      	nop
 80002f0:	e7f0      	b.n	80002d4 <task2+0x4>
 80002f2:	bf00      	nop
 80002f4:	20000080 	.word	0x20000080
 80002f8:	20000090 	.word	0x20000090
 80002fc:	2000008c 	.word	0x2000008c

08000300 <task3>:
	}
}

void task3(void){
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	periodicTask++;
 8000304:	4b04      	ldr	r3, [pc, #16]	@ (8000318 <task3+0x18>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	3301      	adds	r3, #1
 800030a:	4a03      	ldr	r2, [pc, #12]	@ (8000318 <task3+0x18>)
 800030c:	6013      	str	r3, [r2, #0]
	osThreadYield();
 800030e:	f000 fa0f 	bl	8000730 <osThreadYield>
}
 8000312:	bf00      	nop
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	20000084 	.word	0x20000084

0800031c <main>:

int main(void){
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
	uart_tx_init();
 8000320:	f000 fb4a 	bl	80009b8 <uart_tx_init>
	tim2_1hz_interrupt_init();
 8000324:	f000 fa32 	bl	800078c <tim2_1hz_interrupt_init>
	osSemaphoreInit(&semaphore1,1);
 8000328:	2101      	movs	r1, #1
 800032a:	480a      	ldr	r0, [pc, #40]	@ (8000354 <main+0x38>)
 800032c:	f000 fa58 	bl	80007e0 <osSemaphoreInit>
	osSemaphoreInit(&semaphore2,0);
 8000330:	2100      	movs	r1, #0
 8000332:	4809      	ldr	r0, [pc, #36]	@ (8000358 <main+0x3c>)
 8000334:	f000 fa54 	bl	80007e0 <osSemaphoreInit>
	osKernelInit();
 8000338:	f000 f994 	bl	8000664 <osKernelInit>
	osKernelAddThreads(&task0,&task1,&task2);
 800033c:	4a07      	ldr	r2, [pc, #28]	@ (800035c <main+0x40>)
 800033e:	4908      	ldr	r1, [pc, #32]	@ (8000360 <main+0x44>)
 8000340:	4808      	ldr	r0, [pc, #32]	@ (8000364 <main+0x48>)
 8000342:	f000 f953 	bl	80005ec <osKernelAddThreads>
	osKernelLaunch(QUANTA);
 8000346:	200a      	movs	r0, #10
 8000348:	f000 f99a 	bl	8000680 <osKernelLaunch>
 800034c:	2300      	movs	r3, #0
}
 800034e:	4618      	mov	r0, r3
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	2000008c 	.word	0x2000008c
 8000358:	20000090 	.word	0x20000090
 800035c:	080002d1 	.word	0x080002d1
 8000360:	0800029d 	.word	0x0800029d
 8000364:	08000281 	.word	0x08000281

08000368 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void){
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
	// Clear update interrupt flag
	TIM2->SR &=~SR_UIF;
 800036c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000370:	691b      	ldr	r3, [r3, #16]
 8000372:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000376:	f023 0301 	bic.w	r3, r3, #1
 800037a:	6113      	str	r3, [r2, #16]

	tim2periodicTask++;
 800037c:	4b04      	ldr	r3, [pc, #16]	@ (8000390 <TIM2_IRQHandler+0x28>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	3301      	adds	r3, #1
 8000382:	4a03      	ldr	r2, [pc, #12]	@ (8000390 <TIM2_IRQHandler+0x28>)
 8000384:	6013      	str	r3, [r2, #0]
}
 8000386:	bf00      	nop
 8000388:	46bd      	mov	sp, r7
 800038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038e:	4770      	bx	lr
 8000390:	20000088 	.word	0x20000088

08000394 <motor_run>:

void motor_run(void) {
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
    printf("Motor is starting...\n\r");
 8000398:	4802      	ldr	r0, [pc, #8]	@ (80003a4 <motor_run+0x10>)
 800039a:	f000 fc83 	bl	8000ca4 <iprintf>

//    printf("Task0_Profiler: %lu\n\n\r", Task0_Profiler);
//    printf("Task1_Profiler: %lu\n\n\r", Task1_Profiler);
//    printf("Task2_Profiler: %lu\n\n\r", Task2_Profiler);
}
 800039e:	bf00      	nop
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	08001998 	.word	0x08001998

080003a8 <valve_open>:

void motor_stop(void){
	printf("Motor is stopping...\n\r");
}

void valve_open(void){
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
	printf("Valve is opening...\n\r");
 80003ac:	4802      	ldr	r0, [pc, #8]	@ (80003b8 <valve_open+0x10>)
 80003ae:	f000 fc79 	bl	8000ca4 <iprintf>

//    printf("Task0_Profiler: %lu\n\n\r", Task0_Profiler);
//    printf("Task1_Profiler: %lu\n\n\r", Task1_Profiler);
//    printf("Task2_Profiler: %lu\n\n\r", Task2_Profiler);
}
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	080019c8 	.word	0x080019c8

080003bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003bc:	b480      	push	{r7}
 80003be:	b083      	sub	sp, #12
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	4603      	mov	r3, r0
 80003c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	db0b      	blt.n	80003e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003ce:	79fb      	ldrb	r3, [r7, #7]
 80003d0:	f003 021f 	and.w	r2, r3, #31
 80003d4:	4907      	ldr	r1, [pc, #28]	@ (80003f4 <__NVIC_EnableIRQ+0x38>)
 80003d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003da:	095b      	lsrs	r3, r3, #5
 80003dc:	2001      	movs	r0, #1
 80003de:	fa00 f202 	lsl.w	r2, r0, r2
 80003e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80003e6:	bf00      	nop
 80003e8:	370c      	adds	r7, #12
 80003ea:	46bd      	mov	sp, r7
 80003ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop
 80003f4:	e000e100 	.word	0xe000e100

080003f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b083      	sub	sp, #12
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	4603      	mov	r3, r0
 8000400:	6039      	str	r1, [r7, #0]
 8000402:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000408:	2b00      	cmp	r3, #0
 800040a:	db0a      	blt.n	8000422 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800040c:	683b      	ldr	r3, [r7, #0]
 800040e:	b2da      	uxtb	r2, r3
 8000410:	490c      	ldr	r1, [pc, #48]	@ (8000444 <__NVIC_SetPriority+0x4c>)
 8000412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000416:	0112      	lsls	r2, r2, #4
 8000418:	b2d2      	uxtb	r2, r2
 800041a:	440b      	add	r3, r1
 800041c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000420:	e00a      	b.n	8000438 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000422:	683b      	ldr	r3, [r7, #0]
 8000424:	b2da      	uxtb	r2, r3
 8000426:	4908      	ldr	r1, [pc, #32]	@ (8000448 <__NVIC_SetPriority+0x50>)
 8000428:	79fb      	ldrb	r3, [r7, #7]
 800042a:	f003 030f 	and.w	r3, r3, #15
 800042e:	3b04      	subs	r3, #4
 8000430:	0112      	lsls	r2, r2, #4
 8000432:	b2d2      	uxtb	r2, r2
 8000434:	440b      	add	r3, r1
 8000436:	761a      	strb	r2, [r3, #24]
}
 8000438:	bf00      	nop
 800043a:	370c      	adds	r7, #12
 800043c:	46bd      	mov	sp, r7
 800043e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000442:	4770      	bx	lr
 8000444:	e000e100 	.word	0xe000e100
 8000448:	e000ed00 	.word	0xe000ed00

0800044c <osKernelStackInit>:

// Each thread will have stack size of 400bytes
int32_t TCB_STACK[NUM_OF_THREADS][STACKSIZE];

void osKernelStackInit(int i)
{
 800044c:	b480      	push	{r7}
 800044e:	b083      	sub	sp, #12
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
	tcbs[i].stackPt =  &TCB_STACK[i][STACKSIZE - 16]; // Stack Pointer
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800045a:	fb02 f303 	mul.w	r3, r2, r3
 800045e:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8000462:	4a60      	ldr	r2, [pc, #384]	@ (80005e4 <osKernelStackInit+0x198>)
 8000464:	441a      	add	r2, r3
 8000466:	4960      	ldr	r1, [pc, #384]	@ (80005e8 <osKernelStackInit+0x19c>)
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]

	// Set bit21 in PSR to 1 for thumb mode
	TCB_STACK[i][STACKSIZE - 1] =  (1U<<24);
 800046e:	4a5d      	ldr	r2, [pc, #372]	@ (80005e4 <osKernelStackInit+0x198>)
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8000476:	fb01 f303 	mul.w	r3, r1, r3
 800047a:	4413      	add	r3, r2
 800047c:	f203 633c 	addw	r3, r3, #1596	@ 0x63c
 8000480:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000484:	601a      	str	r2, [r3, #0]

	// Block below is optional/for debugging purpose only
	// Dummy stack content
	TCB_STACK[i][STACKSIZE-3]  = 0xAAAAAAAA;    // R14
 8000486:	4a57      	ldr	r2, [pc, #348]	@ (80005e4 <osKernelStackInit+0x198>)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 800048e:	fb01 f303 	mul.w	r3, r1, r3
 8000492:	4413      	add	r3, r2
 8000494:	f203 6334 	addw	r3, r3, #1588	@ 0x634
 8000498:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 800049c:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-4]  = 0xAAAAAAAA;    // R12
 800049e:	4a51      	ldr	r2, [pc, #324]	@ (80005e4 <osKernelStackInit+0x198>)
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80004a6:	fb01 f303 	mul.w	r3, r1, r3
 80004aa:	4413      	add	r3, r2
 80004ac:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 80004b0:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80004b4:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-5]  = 0xAAAAAAAA;    // R3
 80004b6:	4a4b      	ldr	r2, [pc, #300]	@ (80005e4 <osKernelStackInit+0x198>)
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80004be:	fb01 f303 	mul.w	r3, r1, r3
 80004c2:	4413      	add	r3, r2
 80004c4:	f203 632c 	addw	r3, r3, #1580	@ 0x62c
 80004c8:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80004cc:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-6]  = 0xAAAAAAAA;    // R2
 80004ce:	4a45      	ldr	r2, [pc, #276]	@ (80005e4 <osKernelStackInit+0x198>)
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80004d6:	fb01 f303 	mul.w	r3, r1, r3
 80004da:	4413      	add	r3, r2
 80004dc:	f503 63c5 	add.w	r3, r3, #1576	@ 0x628
 80004e0:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80004e4:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-7]  = 0xAAAAAAAA;    // R1
 80004e6:	4a3f      	ldr	r2, [pc, #252]	@ (80005e4 <osKernelStackInit+0x198>)
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80004ee:	fb01 f303 	mul.w	r3, r1, r3
 80004f2:	4413      	add	r3, r2
 80004f4:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 80004f8:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80004fc:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-8]  = 0xAAAAAAAA;    // R0
 80004fe:	4a39      	ldr	r2, [pc, #228]	@ (80005e4 <osKernelStackInit+0x198>)
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8000506:	fb01 f303 	mul.w	r3, r1, r3
 800050a:	4413      	add	r3, r2
 800050c:	f503 63c4 	add.w	r3, r3, #1568	@ 0x620
 8000510:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000514:	601a      	str	r2, [r3, #0]

	TCB_STACK[i][STACKSIZE-9]  = 0xAAAAAAAA;    // R11
 8000516:	4a33      	ldr	r2, [pc, #204]	@ (80005e4 <osKernelStackInit+0x198>)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 800051e:	fb01 f303 	mul.w	r3, r1, r3
 8000522:	4413      	add	r3, r2
 8000524:	f203 631c 	addw	r3, r3, #1564	@ 0x61c
 8000528:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 800052c:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-10] = 0xAAAAAAAA;   // R10
 800052e:	4a2d      	ldr	r2, [pc, #180]	@ (80005e4 <osKernelStackInit+0x198>)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8000536:	fb01 f303 	mul.w	r3, r1, r3
 800053a:	4413      	add	r3, r2
 800053c:	f503 63c3 	add.w	r3, r3, #1560	@ 0x618
 8000540:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000544:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-11] = 0xAAAAAAAA;   // R9
 8000546:	4a27      	ldr	r2, [pc, #156]	@ (80005e4 <osKernelStackInit+0x198>)
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 800054e:	fb01 f303 	mul.w	r3, r1, r3
 8000552:	4413      	add	r3, r2
 8000554:	f203 6314 	addw	r3, r3, #1556	@ 0x614
 8000558:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 800055c:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-12] = 0xAAAAAAAA;   // R8
 800055e:	4a21      	ldr	r2, [pc, #132]	@ (80005e4 <osKernelStackInit+0x198>)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8000566:	fb01 f303 	mul.w	r3, r1, r3
 800056a:	4413      	add	r3, r2
 800056c:	f503 63c2 	add.w	r3, r3, #1552	@ 0x610
 8000570:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000574:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-13] = 0xAAAAAAAA;   // R7
 8000576:	4a1b      	ldr	r2, [pc, #108]	@ (80005e4 <osKernelStackInit+0x198>)
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 800057e:	fb01 f303 	mul.w	r3, r1, r3
 8000582:	4413      	add	r3, r2
 8000584:	f203 630c 	addw	r3, r3, #1548	@ 0x60c
 8000588:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 800058c:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-14] = 0xAAAAAAAA;   // R6
 800058e:	4a15      	ldr	r2, [pc, #84]	@ (80005e4 <osKernelStackInit+0x198>)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8000596:	fb01 f303 	mul.w	r3, r1, r3
 800059a:	4413      	add	r3, r2
 800059c:	f503 63c1 	add.w	r3, r3, #1544	@ 0x608
 80005a0:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80005a4:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-15] = 0xAAAAAAAA;   // R5
 80005a6:	4a0f      	ldr	r2, [pc, #60]	@ (80005e4 <osKernelStackInit+0x198>)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80005ae:	fb01 f303 	mul.w	r3, r1, r3
 80005b2:	4413      	add	r3, r2
 80005b4:	f203 6304 	addw	r3, r3, #1540	@ 0x604
 80005b8:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80005bc:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-16] = 0xAAAAAAAA;   // R4
 80005be:	4a09      	ldr	r2, [pc, #36]	@ (80005e4 <osKernelStackInit+0x198>)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80005c6:	fb01 f303 	mul.w	r3, r1, r3
 80005ca:	4413      	add	r3, r2
 80005cc:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 80005d0:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80005d4:	601a      	str	r2, [r3, #0]
}
 80005d6:	bf00      	nop
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	200000b8 	.word	0x200000b8
 80005e8:	2000009c 	.word	0x2000009c

080005ec <osKernelAddThreads>:

uint8_t osKernelAddThreads(void(*task0)(void),void(*task1)(void),void(*task2)(void))
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	60b9      	str	r1, [r7, #8]
 80005f6:	607a      	str	r2, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005f8:	b672      	cpsid	i
}
 80005fa:	bf00      	nop
	// Disable global interrupts
	__disable_irq();
	tcbs[0].nextPt =  &tcbs[1];
 80005fc:	4b14      	ldr	r3, [pc, #80]	@ (8000650 <osKernelAddThreads+0x64>)
 80005fe:	4a15      	ldr	r2, [pc, #84]	@ (8000654 <osKernelAddThreads+0x68>)
 8000600:	605a      	str	r2, [r3, #4]
	tcbs[1].nextPt =  &tcbs[2];
 8000602:	4b13      	ldr	r3, [pc, #76]	@ (8000650 <osKernelAddThreads+0x64>)
 8000604:	4a14      	ldr	r2, [pc, #80]	@ (8000658 <osKernelAddThreads+0x6c>)
 8000606:	60da      	str	r2, [r3, #12]
	tcbs[2].nextPt =  &tcbs[0];
 8000608:	4b11      	ldr	r3, [pc, #68]	@ (8000650 <osKernelAddThreads+0x64>)
 800060a:	4a11      	ldr	r2, [pc, #68]	@ (8000650 <osKernelAddThreads+0x64>)
 800060c:	615a      	str	r2, [r3, #20]

	// Initial stack for thread0
	osKernelStackInit(0);
 800060e:	2000      	movs	r0, #0
 8000610:	f7ff ff1c 	bl	800044c <osKernelStackInit>

	// Initial PC
	TCB_STACK[0][STACKSIZE - 2] =  (int32_t)(task0);
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	4a11      	ldr	r2, [pc, #68]	@ (800065c <osKernelAddThreads+0x70>)
 8000618:	f8c2 3638 	str.w	r3, [r2, #1592]	@ 0x638

	// Same for thread1
	osKernelStackInit(1);
 800061c:	2001      	movs	r0, #1
 800061e:	f7ff ff15 	bl	800044c <osKernelStackInit>
	TCB_STACK[1][STACKSIZE - 2] =  (int32_t)(task1);
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	4a0d      	ldr	r2, [pc, #52]	@ (800065c <osKernelAddThreads+0x70>)
 8000626:	f8c2 3c78 	str.w	r3, [r2, #3192]	@ 0xc78


	// Same for thread2
	osKernelStackInit(2);
 800062a:	2002      	movs	r0, #2
 800062c:	f7ff ff0e 	bl	800044c <osKernelStackInit>
	TCB_STACK[2][STACKSIZE - 2] =  (int32_t)(task2);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	4a0a      	ldr	r2, [pc, #40]	@ (800065c <osKernelAddThreads+0x70>)
 8000634:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8000638:	f8c2 32b8 	str.w	r3, [r2, #696]	@ 0x2b8

	// Starts at thread0
	currentPt  = &tcbs[0];
 800063c:	4b08      	ldr	r3, [pc, #32]	@ (8000660 <osKernelAddThreads+0x74>)
 800063e:	4a04      	ldr	r2, [pc, #16]	@ (8000650 <osKernelAddThreads+0x64>)
 8000640:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000642:	b662      	cpsie	i
}
 8000644:	bf00      	nop

	// Enable global interrupts
	__enable_irq();

	return 1;
 8000646:	2301      	movs	r3, #1
}
 8000648:	4618      	mov	r0, r3
 800064a:	3710      	adds	r7, #16
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	2000009c 	.word	0x2000009c
 8000654:	200000a4 	.word	0x200000a4
 8000658:	200000ac 	.word	0x200000ac
 800065c:	200000b8 	.word	0x200000b8
 8000660:	200000b4 	.word	0x200000b4

08000664 <osKernelInit>:

void osKernelInit(void){
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
	MILLIS_PRESCALER  = (BUS_FREQ/1000);
 8000668:	4b04      	ldr	r3, [pc, #16]	@ (800067c <osKernelInit+0x18>)
 800066a:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 800066e:	601a      	str	r2, [r3, #0]
}
 8000670:	bf00      	nop
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	20000098 	.word	0x20000098

08000680 <osKernelLaunch>:

void osKernelLaunch(uint32_t quanta){
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	// Reset system tick
	SysTick->CTRL = SYSTICK_RST;
 8000688:	4b10      	ldr	r3, [pc, #64]	@ (80006cc <osKernelLaunch+0x4c>)
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]

	// Clear system tick current value register
	SysTick->VAL = 0;
 800068e:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <osKernelLaunch+0x4c>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]

	// Load quanta
	SysTick->LOAD =  (quanta * MILLIS_PRESCALER) - 1;
 8000694:	4b0e      	ldr	r3, [pc, #56]	@ (80006d0 <osKernelLaunch+0x50>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	687a      	ldr	r2, [r7, #4]
 800069a:	fb02 f303 	mul.w	r3, r2, r3
 800069e:	4a0b      	ldr	r2, [pc, #44]	@ (80006cc <osKernelLaunch+0x4c>)
 80006a0:	3b01      	subs	r3, #1
 80006a2:	6053      	str	r3, [r2, #4]

	// Set system tick to low priority
	NVIC_SetPriority(SysTick_IRQn,15);
 80006a4:	210f      	movs	r1, #15
 80006a6:	f04f 30ff 	mov.w	r0, #4294967295
 80006aa:	f7ff fea5 	bl	80003f8 <__NVIC_SetPriority>

	// Enable system tick, select internal clock
	SysTick->CTRL  = CTRL_CLCKSRC | CTRL_ENABLE;
 80006ae:	4b07      	ldr	r3, [pc, #28]	@ (80006cc <osKernelLaunch+0x4c>)
 80006b0:	2205      	movs	r2, #5
 80006b2:	601a      	str	r2, [r3, #0]

	// Enable system tick interrupt
	SysTick->CTRL  |= CTRL_TICKINT;
 80006b4:	4b05      	ldr	r3, [pc, #20]	@ (80006cc <osKernelLaunch+0x4c>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a04      	ldr	r2, [pc, #16]	@ (80006cc <osKernelLaunch+0x4c>)
 80006ba:	f043 0302 	orr.w	r3, r3, #2
 80006be:	6013      	str	r3, [r2, #0]

	// Launch scheduler
	osSchedulerLaunch();
 80006c0:	f000 f81e 	bl	8000700 <osSchedulerLaunch>
}
 80006c4:	bf00      	nop
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	e000e010 	.word	0xe000e010
 80006d0:	20000098 	.word	0x20000098

080006d4 <SysTick_Handler>:

__attribute__((naked)) void SysTick_Handler(void)
{
	// SUSPEND CURRENT THREAD
		// Disable global interrupts
		__asm("CPSID	I");
 80006d4:	b672      	cpsid	i

		// Save r4,r5,r6,r7,r8,r9,r10,11
		__asm("PUSH  {R4-R11}");
 80006d6:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

		// Load address of currentPt into r0
		__asm("LDR R0, =currentPt");
 80006da:	4808      	ldr	r0, [pc, #32]	@ (80006fc <SysTick_Handler+0x28>)

		// r1 = currentPt
		__asm("LDR R1,[R0]");
 80006dc:	6801      	ldr	r1, [r0, #0]

		// Save SP into tcb
		__asm("STR SP,[R1]");
 80006de:	f8c1 d000 	str.w	sp, [r1]

    // CHOOSE NEXT THREAD
		 __asm("PUSH	{R0,LR}");
 80006e2:	b501      	push	{r0, lr}
		 __asm("BL		osSchedulerRoundRobin");
 80006e4:	f000 f836 	bl	8000754 <osSchedulerRoundRobin>
		 __asm("POP    {R0,LR}");
 80006e8:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

	    // R1 =  currentPt
		 __asm("LDR		R1,[R0]");
 80006ec:	6801      	ldr	r1, [r0, #0]

		// SP =  currentPt->stackPt
		__asm("LDR SP,[R1]");
 80006ee:	f8d1 d000 	ldr.w	sp, [r1]

		// Restore r4,r5,r6,r7,r8,r9,r10,11
		__asm("POP {R4-R11}");
 80006f2:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

		// Enable global interrupts
		__asm("CPSIE	I");
 80006f6:	b662      	cpsie	i

		// Return from exception and restore r0,r1,r2,r3,r12,lr,pc,psr
		__asm("BX	LR");
 80006f8:	4770      	bx	lr
}
 80006fa:	bf00      	nop
 80006fc:	200000b4 	.word	0x200000b4

08000700 <osSchedulerLaunch>:

void osSchedulerLaunch(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
	// Load address of currentPt into R0
	__asm("LDR R0,=currentPt");
 8000704:	4809      	ldr	r0, [pc, #36]	@ (800072c <osSchedulerLaunch+0x2c>)

	// r2 = currentPt
	__asm("LDR R2,[r0]");
 8000706:	6802      	ldr	r2, [r0, #0]

	// SP = currentPt->stackPt
	__asm("LDR  SP,[R2]");
 8000708:	f8d2 d000 	ldr.w	sp, [r2]

	// Restore r4,r5,r6,r7,r8,r9,r10,r11
	__asm("POP {R4-R11}");
 800070c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

	// Restore r12
	__asm("POP {R12}");
 8000710:	f85d cb04 	ldr.w	ip, [sp], #4

	// Restore r0,r1,r2,r3
	__asm("POP	{R0-R3}");
 8000714:	bc0f      	pop	{r0, r1, r2, r3}

	// Skip LR
	__asm("ADD  SP,SP,#4");
 8000716:	b001      	add	sp, #4

	// Create a new start location by popping LR
	__asm("POP {LR}");
 8000718:	f85d eb04 	ldr.w	lr, [sp], #4

	// Skip PSR by adding 4 to SP
	__asm("ADD  SP,SP,#4");
 800071c:	b001      	add	sp, #4

	// Enable global interrupts
	__asm("CPSIE	I");
 800071e:	b662      	cpsie	i

	// Return from exception
	__asm("BX	LR");
 8000720:	4770      	bx	lr
}
 8000722:	bf00      	nop
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr
 800072c:	200000b4 	.word	0x200000b4

08000730 <osThreadYield>:

void osThreadYield(void){
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
	// Clear System tick current value register
	SysTick->VAL = 0;
 8000734:	4b05      	ldr	r3, [pc, #20]	@ (800074c <osThreadYield+0x1c>)
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]

	// Trigger SysTick
	INTCTRL = PENDSTSET;
 800073a:	4b05      	ldr	r3, [pc, #20]	@ (8000750 <osThreadYield+0x20>)
 800073c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000740:	601a      	str	r2, [r3, #0]
}
 8000742:	bf00      	nop
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr
 800074c:	e000e010 	.word	0xe000e010
 8000750:	e000ed04 	.word	0xe000ed04

08000754 <osSchedulerRoundRobin>:

void osSchedulerRoundRobin(void){
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	if((++period_tick)  == PERIOD){
 8000758:	4b0a      	ldr	r3, [pc, #40]	@ (8000784 <osSchedulerRoundRobin+0x30>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	3301      	adds	r3, #1
 800075e:	4a09      	ldr	r2, [pc, #36]	@ (8000784 <osSchedulerRoundRobin+0x30>)
 8000760:	6013      	str	r3, [r2, #0]
 8000762:	4b08      	ldr	r3, [pc, #32]	@ (8000784 <osSchedulerRoundRobin+0x30>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	2b64      	cmp	r3, #100	@ 0x64
 8000768:	d104      	bne.n	8000774 <osSchedulerRoundRobin+0x20>
		(*task3)();
 800076a:	f7ff fdc9 	bl	8000300 <task3>
		period_tick = 0;
 800076e:	4b05      	ldr	r3, [pc, #20]	@ (8000784 <osSchedulerRoundRobin+0x30>)
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
	}

	currentPt = currentPt->nextPt;
 8000774:	4b04      	ldr	r3, [pc, #16]	@ (8000788 <osSchedulerRoundRobin+0x34>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	685b      	ldr	r3, [r3, #4]
 800077a:	4a03      	ldr	r2, [pc, #12]	@ (8000788 <osSchedulerRoundRobin+0x34>)
 800077c:	6013      	str	r3, [r2, #0]
}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000094 	.word	0x20000094
 8000788:	200000b4 	.word	0x200000b4

0800078c <tim2_1hz_interrupt_init>:

void tim2_1hz_interrupt_init(void){
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
	// Enable tim2 clock access
	RCC->APB1ENR |=TIM2EN;
 8000790:	4b12      	ldr	r3, [pc, #72]	@ (80007dc <tim2_1hz_interrupt_init+0x50>)
 8000792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000794:	4a11      	ldr	r2, [pc, #68]	@ (80007dc <tim2_1hz_interrupt_init+0x50>)
 8000796:	f043 0301 	orr.w	r3, r3, #1
 800079a:	6413      	str	r3, [r2, #64]	@ 0x40

	// Set timer prescaler
	TIM2->PSC =  1600 - 1;
 800079c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80007a0:	f240 623f 	movw	r2, #1599	@ 0x63f
 80007a4:	629a      	str	r2, [r3, #40]	@ 0x28

	// Set auto reload value
	TIM2->ARR =  10000 -1;
 80007a6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80007aa:	f242 720f 	movw	r2, #9999	@ 0x270f
 80007ae:	62da      	str	r2, [r3, #44]	@ 0x2c

	// Clear counter
	TIM2->CNT = 0;
 80007b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80007b4:	2200      	movs	r2, #0
 80007b6:	625a      	str	r2, [r3, #36]	@ 0x24

	// Enable timer
	TIM2->CR1 =  CR1_CEN;
 80007b8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80007bc:	2201      	movs	r2, #1
 80007be:	601a      	str	r2, [r3, #0]

	// Enable timer interrupt
	TIM2->DIER |= DIER_UIE;
 80007c0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80007c4:	68db      	ldr	r3, [r3, #12]
 80007c6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007ca:	f043 0301 	orr.w	r3, r3, #1
 80007ce:	60d3      	str	r3, [r2, #12]

	// Enable timer interrupt in NVIC
	NVIC_EnableIRQ(TIM2_IRQn);
 80007d0:	201c      	movs	r0, #28
 80007d2:	f7ff fdf3 	bl	80003bc <__NVIC_EnableIRQ>
}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40023800 	.word	0x40023800

080007e0 <osSemaphoreInit>:

void osSemaphoreInit(int32_t *semaphore, int32_t value){
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	6039      	str	r1, [r7, #0]
	*semaphore =  value;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	683a      	ldr	r2, [r7, #0]
 80007ee:	601a      	str	r2, [r3, #0]
}
 80007f0:	bf00      	nop
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr

080007fc <osSemaphoreSet>:


void osSemaphoreSet(int32_t * semaphore){
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8000804:	b672      	cpsid	i
}
 8000806:	bf00      	nop
	__disable_irq();
	*semaphore += 1;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	1c5a      	adds	r2, r3, #1
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000812:	b662      	cpsie	i
}
 8000814:	bf00      	nop
	__enable_irq();
}
 8000816:	bf00      	nop
 8000818:	370c      	adds	r7, #12
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr

08000822 <osSemaphoreWait>:

void osSemaphoreWait(int32_t * semaphore){
 8000822:	b480      	push	{r7}
 8000824:	b083      	sub	sp, #12
 8000826:	af00      	add	r7, sp, #0
 8000828:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 800082a:	b672      	cpsid	i
}
 800082c:	bf00      	nop
	__disable_irq();

	while(*semaphore <= 0){
 800082e:	e003      	b.n	8000838 <osSemaphoreWait+0x16>
  __ASM volatile ("cpsid i" : : : "memory");
 8000830:	b672      	cpsid	i
}
 8000832:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8000834:	b662      	cpsie	i
}
 8000836:	bf00      	nop
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2b00      	cmp	r3, #0
 800083e:	ddf7      	ble.n	8000830 <osSemaphoreWait+0xe>
		__disable_irq();
		__enable_irq();
	}

	*semaphore -=1 ;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	1e5a      	subs	r2, r3, #1
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800084a:	b662      	cpsie	i
}
 800084c:	bf00      	nop
	__enable_irq();
}
 800084e:	bf00      	nop
 8000850:	370c      	adds	r7, #12
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr

0800085a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	b086      	sub	sp, #24
 800085e:	af00      	add	r7, sp, #0
 8000860:	60f8      	str	r0, [r7, #12]
 8000862:	60b9      	str	r1, [r7, #8]
 8000864:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000866:	2300      	movs	r3, #0
 8000868:	617b      	str	r3, [r7, #20]
 800086a:	e00a      	b.n	8000882 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800086c:	f3af 8000 	nop.w
 8000870:	4601      	mov	r1, r0
 8000872:	68bb      	ldr	r3, [r7, #8]
 8000874:	1c5a      	adds	r2, r3, #1
 8000876:	60ba      	str	r2, [r7, #8]
 8000878:	b2ca      	uxtb	r2, r1
 800087a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	3301      	adds	r3, #1
 8000880:	617b      	str	r3, [r7, #20]
 8000882:	697a      	ldr	r2, [r7, #20]
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	429a      	cmp	r2, r3
 8000888:	dbf0      	blt.n	800086c <_read+0x12>
	}

return len;
 800088a:	687b      	ldr	r3, [r7, #4]
}
 800088c:	4618      	mov	r0, r3
 800088e:	3718      	adds	r7, #24
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b086      	sub	sp, #24
 8000898:	af00      	add	r7, sp, #0
 800089a:	60f8      	str	r0, [r7, #12]
 800089c:	60b9      	str	r1, [r7, #8]
 800089e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]
 80008a4:	e009      	b.n	80008ba <_write+0x26>
	{
		__io_putchar(*ptr++);
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	1c5a      	adds	r2, r3, #1
 80008aa:	60ba      	str	r2, [r7, #8]
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 f876 	bl	80009a0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	3301      	adds	r3, #1
 80008b8:	617b      	str	r3, [r7, #20]
 80008ba:	697a      	ldr	r2, [r7, #20]
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	429a      	cmp	r2, r3
 80008c0:	dbf1      	blt.n	80008a6 <_write+0x12>
	}
	return len;
 80008c2:	687b      	ldr	r3, [r7, #4]
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3718      	adds	r7, #24
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}

080008cc <_close>:

int _close(int file)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
	return -1;
 80008d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008d8:	4618      	mov	r0, r3
 80008da:	370c      	adds	r7, #12
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr

080008e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80008f4:	605a      	str	r2, [r3, #4]
	return 0;
 80008f6:	2300      	movs	r3, #0
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	370c      	adds	r7, #12
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <_isatty>:

int _isatty(int file)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
	return 1;
 800090c:	2301      	movs	r3, #1
}
 800090e:	4618      	mov	r0, r3
 8000910:	370c      	adds	r7, #12
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr

0800091a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800091a:	b480      	push	{r7}
 800091c:	b085      	sub	sp, #20
 800091e:	af00      	add	r7, sp, #0
 8000920:	60f8      	str	r0, [r7, #12]
 8000922:	60b9      	str	r1, [r7, #8]
 8000924:	607a      	str	r2, [r7, #4]
	return 0;
 8000926:	2300      	movs	r3, #0
}
 8000928:	4618      	mov	r0, r3
 800092a:	3714      	adds	r7, #20
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800093c:	4a14      	ldr	r2, [pc, #80]	@ (8000990 <_sbrk+0x5c>)
 800093e:	4b15      	ldr	r3, [pc, #84]	@ (8000994 <_sbrk+0x60>)
 8000940:	1ad3      	subs	r3, r2, r3
 8000942:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000948:	4b13      	ldr	r3, [pc, #76]	@ (8000998 <_sbrk+0x64>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d102      	bne.n	8000956 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000950:	4b11      	ldr	r3, [pc, #68]	@ (8000998 <_sbrk+0x64>)
 8000952:	4a12      	ldr	r2, [pc, #72]	@ (800099c <_sbrk+0x68>)
 8000954:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000956:	4b10      	ldr	r3, [pc, #64]	@ (8000998 <_sbrk+0x64>)
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4413      	add	r3, r2
 800095e:	693a      	ldr	r2, [r7, #16]
 8000960:	429a      	cmp	r2, r3
 8000962:	d207      	bcs.n	8000974 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000964:	f000 fa42 	bl	8000dec <__errno>
 8000968:	4603      	mov	r3, r0
 800096a:	220c      	movs	r2, #12
 800096c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800096e:	f04f 33ff 	mov.w	r3, #4294967295
 8000972:	e009      	b.n	8000988 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000974:	4b08      	ldr	r3, [pc, #32]	@ (8000998 <_sbrk+0x64>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800097a:	4b07      	ldr	r3, [pc, #28]	@ (8000998 <_sbrk+0x64>)
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4413      	add	r3, r2
 8000982:	4a05      	ldr	r2, [pc, #20]	@ (8000998 <_sbrk+0x64>)
 8000984:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000986:	68fb      	ldr	r3, [r7, #12]
}
 8000988:	4618      	mov	r0, r3
 800098a:	3718      	adds	r7, #24
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	20020000 	.word	0x20020000
 8000994:	00000400 	.word	0x00000400
 8000998:	20001378 	.word	0x20001378
 800099c:	200014c8 	.word	0x200014c8

080009a0 <__io_putchar>:
static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate);
static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate);
static void uart_write(int ch);


int __io_putchar(int ch){
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	f000 f84f 	bl	8000a4c <uart_write>
	return ch;
 80009ae:	687b      	ldr	r3, [r7, #4]
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <uart_tx_init>:

void uart_tx_init(void){
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
	// Enable clock access to GPIOA
	RCC->AHB1ENR |= GPIOAEN;
 80009bc:	4b1f      	ldr	r3, [pc, #124]	@ (8000a3c <uart_tx_init+0x84>)
 80009be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c0:	4a1e      	ldr	r2, [pc, #120]	@ (8000a3c <uart_tx_init+0x84>)
 80009c2:	f043 0301 	orr.w	r3, r3, #1
 80009c6:	6313      	str	r3, [r2, #48]	@ 0x30

	// Set PA2 to alternate function mode
	GPIOA->MODER &=~ (1U<<4);
 80009c8:	4b1d      	ldr	r3, [pc, #116]	@ (8000a40 <uart_tx_init+0x88>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a1c      	ldr	r2, [pc, #112]	@ (8000a40 <uart_tx_init+0x88>)
 80009ce:	f023 0310 	bic.w	r3, r3, #16
 80009d2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 80009d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000a40 <uart_tx_init+0x88>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a19      	ldr	r2, [pc, #100]	@ (8000a40 <uart_tx_init+0x88>)
 80009da:	f043 0320 	orr.w	r3, r3, #32
 80009de:	6013      	str	r3, [r2, #0]

	//Set alternate function type to AF7 (UART2_TX)
	GPIOA->AFR[0] |= (1U<<8);
 80009e0:	4b17      	ldr	r3, [pc, #92]	@ (8000a40 <uart_tx_init+0x88>)
 80009e2:	6a1b      	ldr	r3, [r3, #32]
 80009e4:	4a16      	ldr	r2, [pc, #88]	@ (8000a40 <uart_tx_init+0x88>)
 80009e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009ea:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 80009ec:	4b14      	ldr	r3, [pc, #80]	@ (8000a40 <uart_tx_init+0x88>)
 80009ee:	6a1b      	ldr	r3, [r3, #32]
 80009f0:	4a13      	ldr	r2, [pc, #76]	@ (8000a40 <uart_tx_init+0x88>)
 80009f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009f6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 80009f8:	4b11      	ldr	r3, [pc, #68]	@ (8000a40 <uart_tx_init+0x88>)
 80009fa:	6a1b      	ldr	r3, [r3, #32]
 80009fc:	4a10      	ldr	r2, [pc, #64]	@ (8000a40 <uart_tx_init+0x88>)
 80009fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a02:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~ (1U<<11);
 8000a04:	4b0e      	ldr	r3, [pc, #56]	@ (8000a40 <uart_tx_init+0x88>)
 8000a06:	6a1b      	ldr	r3, [r3, #32]
 8000a08:	4a0d      	ldr	r2, [pc, #52]	@ (8000a40 <uart_tx_init+0x88>)
 8000a0a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000a0e:	6213      	str	r3, [r2, #32]

	// Enable clock access to UART
	RCC->APB1ENR |= UART2EN;
 8000a10:	4b0a      	ldr	r3, [pc, #40]	@ (8000a3c <uart_tx_init+0x84>)
 8000a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a14:	4a09      	ldr	r2, [pc, #36]	@ (8000a3c <uart_tx_init+0x84>)
 8000a16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a1a:	6413      	str	r3, [r2, #64]	@ 0x40

	// Configure baud rate, either set directly or write a function
	uart_set_baudrate(APB1_CLK,UART_BAUDRATE);
 8000a1c:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8000a20:	4808      	ldr	r0, [pc, #32]	@ (8000a44 <uart_tx_init+0x8c>)
 8000a22:	f000 f82b 	bl	8000a7c <uart_set_baudrate>

	// Configure transfer direction
	USART2->CR1 = CR1_TE;
 8000a26:	4b08      	ldr	r3, [pc, #32]	@ (8000a48 <uart_tx_init+0x90>)
 8000a28:	2208      	movs	r2, #8
 8000a2a:	60da      	str	r2, [r3, #12]

	// Enable UART module
	USART2->CR1 |= CR1_UE;
 8000a2c:	4b06      	ldr	r3, [pc, #24]	@ (8000a48 <uart_tx_init+0x90>)
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	4a05      	ldr	r2, [pc, #20]	@ (8000a48 <uart_tx_init+0x90>)
 8000a32:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000a36:	60d3      	str	r3, [r2, #12]
}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40020000 	.word	0x40020000
 8000a44:	00f42400 	.word	0x00f42400
 8000a48:	40004400 	.word	0x40004400

08000a4c <uart_write>:

static void uart_write(int ch){
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
	// Check that the transmit data register is empty
	 while(!(USART2->SR & SR_TXE)){}
 8000a54:	bf00      	nop
 8000a56:	4b08      	ldr	r3, [pc, #32]	@ (8000a78 <uart_write+0x2c>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d0f9      	beq.n	8000a56 <uart_write+0xa>

	// Write to transmit data register
	 USART2->DR =  (ch & 0XFF);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4a04      	ldr	r2, [pc, #16]	@ (8000a78 <uart_write+0x2c>)
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	6053      	str	r3, [r2, #4]
}
 8000a6a:	bf00      	nop
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	40004400 	.word	0x40004400

08000a7c <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate){
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	6039      	str	r1, [r7, #0]
	USART2->BRR = compute_uart_bd(periph_clk,baudrate);
 8000a86:	6839      	ldr	r1, [r7, #0]
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f000 f80b 	bl	8000aa4 <compute_uart_bd>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	461a      	mov	r2, r3
 8000a92:	4b03      	ldr	r3, [pc, #12]	@ (8000aa0 <uart_set_baudrate+0x24>)
 8000a94:	609a      	str	r2, [r3, #8]
}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40004400 	.word	0x40004400

08000aa4 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate){
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	6039      	str	r1, [r7, #0]
	return ((periph_clk + (baudrate/2U))/baudrate);
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	085a      	lsrs	r2, r3, #1
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	441a      	add	r2, r3
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000abc:	b29b      	uxth	r3, r3
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
	...

08000acc <Reset_Handler>:
 8000acc:	480d      	ldr	r0, [pc, #52]	@ (8000b04 <LoopForever+0x2>)
 8000ace:	4685      	mov	sp, r0
 8000ad0:	f3af 8000 	nop.w
 8000ad4:	480c      	ldr	r0, [pc, #48]	@ (8000b08 <LoopForever+0x6>)
 8000ad6:	490d      	ldr	r1, [pc, #52]	@ (8000b0c <LoopForever+0xa>)
 8000ad8:	4a0d      	ldr	r2, [pc, #52]	@ (8000b10 <LoopForever+0xe>)
 8000ada:	2300      	movs	r3, #0
 8000adc:	e002      	b.n	8000ae4 <LoopCopyDataInit>

08000ade <CopyDataInit>:
 8000ade:	58d4      	ldr	r4, [r2, r3]
 8000ae0:	50c4      	str	r4, [r0, r3]
 8000ae2:	3304      	adds	r3, #4

08000ae4 <LoopCopyDataInit>:
 8000ae4:	18c4      	adds	r4, r0, r3
 8000ae6:	428c      	cmp	r4, r1
 8000ae8:	d3f9      	bcc.n	8000ade <CopyDataInit>
 8000aea:	4a0a      	ldr	r2, [pc, #40]	@ (8000b14 <LoopForever+0x12>)
 8000aec:	4c0a      	ldr	r4, [pc, #40]	@ (8000b18 <LoopForever+0x16>)
 8000aee:	2300      	movs	r3, #0
 8000af0:	e001      	b.n	8000af6 <LoopFillZerobss>

08000af2 <FillZerobss>:
 8000af2:	6013      	str	r3, [r2, #0]
 8000af4:	3204      	adds	r2, #4

08000af6 <LoopFillZerobss>:
 8000af6:	42a2      	cmp	r2, r4
 8000af8:	d3fb      	bcc.n	8000af2 <FillZerobss>
 8000afa:	f000 f97d 	bl	8000df8 <__libc_init_array>
 8000afe:	f7ff fc0d 	bl	800031c <main>

08000b02 <LoopForever>:
 8000b02:	e7fe      	b.n	8000b02 <LoopForever>
 8000b04:	20020000 	.word	0x20020000
 8000b08:	20000000 	.word	0x20000000
 8000b0c:	2000005c 	.word	0x2000005c
 8000b10:	08001a3c 	.word	0x08001a3c
 8000b14:	2000005c 	.word	0x2000005c
 8000b18:	200014c8 	.word	0x200014c8

08000b1c <ADC_IRQHandler>:
 8000b1c:	e7fe      	b.n	8000b1c <ADC_IRQHandler>
	...

08000b20 <std>:
 8000b20:	2300      	movs	r3, #0
 8000b22:	b510      	push	{r4, lr}
 8000b24:	4604      	mov	r4, r0
 8000b26:	e9c0 3300 	strd	r3, r3, [r0]
 8000b2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000b2e:	6083      	str	r3, [r0, #8]
 8000b30:	8181      	strh	r1, [r0, #12]
 8000b32:	6643      	str	r3, [r0, #100]	@ 0x64
 8000b34:	81c2      	strh	r2, [r0, #14]
 8000b36:	6183      	str	r3, [r0, #24]
 8000b38:	4619      	mov	r1, r3
 8000b3a:	2208      	movs	r2, #8
 8000b3c:	305c      	adds	r0, #92	@ 0x5c
 8000b3e:	f000 f906 	bl	8000d4e <memset>
 8000b42:	4b0d      	ldr	r3, [pc, #52]	@ (8000b78 <std+0x58>)
 8000b44:	6263      	str	r3, [r4, #36]	@ 0x24
 8000b46:	4b0d      	ldr	r3, [pc, #52]	@ (8000b7c <std+0x5c>)
 8000b48:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b80 <std+0x60>)
 8000b4c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b84 <std+0x64>)
 8000b50:	6323      	str	r3, [r4, #48]	@ 0x30
 8000b52:	4b0d      	ldr	r3, [pc, #52]	@ (8000b88 <std+0x68>)
 8000b54:	6224      	str	r4, [r4, #32]
 8000b56:	429c      	cmp	r4, r3
 8000b58:	d006      	beq.n	8000b68 <std+0x48>
 8000b5a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000b5e:	4294      	cmp	r4, r2
 8000b60:	d002      	beq.n	8000b68 <std+0x48>
 8000b62:	33d0      	adds	r3, #208	@ 0xd0
 8000b64:	429c      	cmp	r4, r3
 8000b66:	d105      	bne.n	8000b74 <std+0x54>
 8000b68:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b70:	f000 b966 	b.w	8000e40 <__retarget_lock_init_recursive>
 8000b74:	bd10      	pop	{r4, pc}
 8000b76:	bf00      	nop
 8000b78:	08000cc9 	.word	0x08000cc9
 8000b7c:	08000ceb 	.word	0x08000ceb
 8000b80:	08000d23 	.word	0x08000d23
 8000b84:	08000d47 	.word	0x08000d47
 8000b88:	2000137c 	.word	0x2000137c

08000b8c <stdio_exit_handler>:
 8000b8c:	4a02      	ldr	r2, [pc, #8]	@ (8000b98 <stdio_exit_handler+0xc>)
 8000b8e:	4903      	ldr	r1, [pc, #12]	@ (8000b9c <stdio_exit_handler+0x10>)
 8000b90:	4803      	ldr	r0, [pc, #12]	@ (8000ba0 <stdio_exit_handler+0x14>)
 8000b92:	f000 b869 	b.w	8000c68 <_fwalk_sglue>
 8000b96:	bf00      	nop
 8000b98:	20000000 	.word	0x20000000
 8000b9c:	080016e1 	.word	0x080016e1
 8000ba0:	20000010 	.word	0x20000010

08000ba4 <cleanup_stdio>:
 8000ba4:	6841      	ldr	r1, [r0, #4]
 8000ba6:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd8 <cleanup_stdio+0x34>)
 8000ba8:	4299      	cmp	r1, r3
 8000baa:	b510      	push	{r4, lr}
 8000bac:	4604      	mov	r4, r0
 8000bae:	d001      	beq.n	8000bb4 <cleanup_stdio+0x10>
 8000bb0:	f000 fd96 	bl	80016e0 <_fflush_r>
 8000bb4:	68a1      	ldr	r1, [r4, #8]
 8000bb6:	4b09      	ldr	r3, [pc, #36]	@ (8000bdc <cleanup_stdio+0x38>)
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	d002      	beq.n	8000bc2 <cleanup_stdio+0x1e>
 8000bbc:	4620      	mov	r0, r4
 8000bbe:	f000 fd8f 	bl	80016e0 <_fflush_r>
 8000bc2:	68e1      	ldr	r1, [r4, #12]
 8000bc4:	4b06      	ldr	r3, [pc, #24]	@ (8000be0 <cleanup_stdio+0x3c>)
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	d004      	beq.n	8000bd4 <cleanup_stdio+0x30>
 8000bca:	4620      	mov	r0, r4
 8000bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000bd0:	f000 bd86 	b.w	80016e0 <_fflush_r>
 8000bd4:	bd10      	pop	{r4, pc}
 8000bd6:	bf00      	nop
 8000bd8:	2000137c 	.word	0x2000137c
 8000bdc:	200013e4 	.word	0x200013e4
 8000be0:	2000144c 	.word	0x2000144c

08000be4 <global_stdio_init.part.0>:
 8000be4:	b510      	push	{r4, lr}
 8000be6:	4b0b      	ldr	r3, [pc, #44]	@ (8000c14 <global_stdio_init.part.0+0x30>)
 8000be8:	4c0b      	ldr	r4, [pc, #44]	@ (8000c18 <global_stdio_init.part.0+0x34>)
 8000bea:	4a0c      	ldr	r2, [pc, #48]	@ (8000c1c <global_stdio_init.part.0+0x38>)
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	4620      	mov	r0, r4
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2104      	movs	r1, #4
 8000bf4:	f7ff ff94 	bl	8000b20 <std>
 8000bf8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	2109      	movs	r1, #9
 8000c00:	f7ff ff8e 	bl	8000b20 <std>
 8000c04:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000c08:	2202      	movs	r2, #2
 8000c0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c0e:	2112      	movs	r1, #18
 8000c10:	f7ff bf86 	b.w	8000b20 <std>
 8000c14:	200014b4 	.word	0x200014b4
 8000c18:	2000137c 	.word	0x2000137c
 8000c1c:	08000b8d 	.word	0x08000b8d

08000c20 <__sfp_lock_acquire>:
 8000c20:	4801      	ldr	r0, [pc, #4]	@ (8000c28 <__sfp_lock_acquire+0x8>)
 8000c22:	f000 b90e 	b.w	8000e42 <__retarget_lock_acquire_recursive>
 8000c26:	bf00      	nop
 8000c28:	200014bd 	.word	0x200014bd

08000c2c <__sfp_lock_release>:
 8000c2c:	4801      	ldr	r0, [pc, #4]	@ (8000c34 <__sfp_lock_release+0x8>)
 8000c2e:	f000 b909 	b.w	8000e44 <__retarget_lock_release_recursive>
 8000c32:	bf00      	nop
 8000c34:	200014bd 	.word	0x200014bd

08000c38 <__sinit>:
 8000c38:	b510      	push	{r4, lr}
 8000c3a:	4604      	mov	r4, r0
 8000c3c:	f7ff fff0 	bl	8000c20 <__sfp_lock_acquire>
 8000c40:	6a23      	ldr	r3, [r4, #32]
 8000c42:	b11b      	cbz	r3, 8000c4c <__sinit+0x14>
 8000c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c48:	f7ff bff0 	b.w	8000c2c <__sfp_lock_release>
 8000c4c:	4b04      	ldr	r3, [pc, #16]	@ (8000c60 <__sinit+0x28>)
 8000c4e:	6223      	str	r3, [r4, #32]
 8000c50:	4b04      	ldr	r3, [pc, #16]	@ (8000c64 <__sinit+0x2c>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d1f5      	bne.n	8000c44 <__sinit+0xc>
 8000c58:	f7ff ffc4 	bl	8000be4 <global_stdio_init.part.0>
 8000c5c:	e7f2      	b.n	8000c44 <__sinit+0xc>
 8000c5e:	bf00      	nop
 8000c60:	08000ba5 	.word	0x08000ba5
 8000c64:	200014b4 	.word	0x200014b4

08000c68 <_fwalk_sglue>:
 8000c68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c6c:	4607      	mov	r7, r0
 8000c6e:	4688      	mov	r8, r1
 8000c70:	4614      	mov	r4, r2
 8000c72:	2600      	movs	r6, #0
 8000c74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000c78:	f1b9 0901 	subs.w	r9, r9, #1
 8000c7c:	d505      	bpl.n	8000c8a <_fwalk_sglue+0x22>
 8000c7e:	6824      	ldr	r4, [r4, #0]
 8000c80:	2c00      	cmp	r4, #0
 8000c82:	d1f7      	bne.n	8000c74 <_fwalk_sglue+0xc>
 8000c84:	4630      	mov	r0, r6
 8000c86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c8a:	89ab      	ldrh	r3, [r5, #12]
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	d907      	bls.n	8000ca0 <_fwalk_sglue+0x38>
 8000c90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000c94:	3301      	adds	r3, #1
 8000c96:	d003      	beq.n	8000ca0 <_fwalk_sglue+0x38>
 8000c98:	4629      	mov	r1, r5
 8000c9a:	4638      	mov	r0, r7
 8000c9c:	47c0      	blx	r8
 8000c9e:	4306      	orrs	r6, r0
 8000ca0:	3568      	adds	r5, #104	@ 0x68
 8000ca2:	e7e9      	b.n	8000c78 <_fwalk_sglue+0x10>

08000ca4 <iprintf>:
 8000ca4:	b40f      	push	{r0, r1, r2, r3}
 8000ca6:	b507      	push	{r0, r1, r2, lr}
 8000ca8:	4906      	ldr	r1, [pc, #24]	@ (8000cc4 <iprintf+0x20>)
 8000caa:	ab04      	add	r3, sp, #16
 8000cac:	6808      	ldr	r0, [r1, #0]
 8000cae:	f853 2b04 	ldr.w	r2, [r3], #4
 8000cb2:	6881      	ldr	r1, [r0, #8]
 8000cb4:	9301      	str	r3, [sp, #4]
 8000cb6:	f000 f9e9 	bl	800108c <_vfiprintf_r>
 8000cba:	b003      	add	sp, #12
 8000cbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8000cc0:	b004      	add	sp, #16
 8000cc2:	4770      	bx	lr
 8000cc4:	2000000c 	.word	0x2000000c

08000cc8 <__sread>:
 8000cc8:	b510      	push	{r4, lr}
 8000cca:	460c      	mov	r4, r1
 8000ccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000cd0:	f000 f868 	bl	8000da4 <_read_r>
 8000cd4:	2800      	cmp	r0, #0
 8000cd6:	bfab      	itete	ge
 8000cd8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000cda:	89a3      	ldrhlt	r3, [r4, #12]
 8000cdc:	181b      	addge	r3, r3, r0
 8000cde:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000ce2:	bfac      	ite	ge
 8000ce4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000ce6:	81a3      	strhlt	r3, [r4, #12]
 8000ce8:	bd10      	pop	{r4, pc}

08000cea <__swrite>:
 8000cea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000cee:	461f      	mov	r7, r3
 8000cf0:	898b      	ldrh	r3, [r1, #12]
 8000cf2:	05db      	lsls	r3, r3, #23
 8000cf4:	4605      	mov	r5, r0
 8000cf6:	460c      	mov	r4, r1
 8000cf8:	4616      	mov	r6, r2
 8000cfa:	d505      	bpl.n	8000d08 <__swrite+0x1e>
 8000cfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d00:	2302      	movs	r3, #2
 8000d02:	2200      	movs	r2, #0
 8000d04:	f000 f83c 	bl	8000d80 <_lseek_r>
 8000d08:	89a3      	ldrh	r3, [r4, #12]
 8000d0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000d0e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000d12:	81a3      	strh	r3, [r4, #12]
 8000d14:	4632      	mov	r2, r6
 8000d16:	463b      	mov	r3, r7
 8000d18:	4628      	mov	r0, r5
 8000d1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000d1e:	f000 b853 	b.w	8000dc8 <_write_r>

08000d22 <__sseek>:
 8000d22:	b510      	push	{r4, lr}
 8000d24:	460c      	mov	r4, r1
 8000d26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d2a:	f000 f829 	bl	8000d80 <_lseek_r>
 8000d2e:	1c43      	adds	r3, r0, #1
 8000d30:	89a3      	ldrh	r3, [r4, #12]
 8000d32:	bf15      	itete	ne
 8000d34:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000d36:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000d3a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000d3e:	81a3      	strheq	r3, [r4, #12]
 8000d40:	bf18      	it	ne
 8000d42:	81a3      	strhne	r3, [r4, #12]
 8000d44:	bd10      	pop	{r4, pc}

08000d46 <__sclose>:
 8000d46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d4a:	f000 b809 	b.w	8000d60 <_close_r>

08000d4e <memset>:
 8000d4e:	4402      	add	r2, r0
 8000d50:	4603      	mov	r3, r0
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d100      	bne.n	8000d58 <memset+0xa>
 8000d56:	4770      	bx	lr
 8000d58:	f803 1b01 	strb.w	r1, [r3], #1
 8000d5c:	e7f9      	b.n	8000d52 <memset+0x4>
	...

08000d60 <_close_r>:
 8000d60:	b538      	push	{r3, r4, r5, lr}
 8000d62:	4d06      	ldr	r5, [pc, #24]	@ (8000d7c <_close_r+0x1c>)
 8000d64:	2300      	movs	r3, #0
 8000d66:	4604      	mov	r4, r0
 8000d68:	4608      	mov	r0, r1
 8000d6a:	602b      	str	r3, [r5, #0]
 8000d6c:	f7ff fdae 	bl	80008cc <_close>
 8000d70:	1c43      	adds	r3, r0, #1
 8000d72:	d102      	bne.n	8000d7a <_close_r+0x1a>
 8000d74:	682b      	ldr	r3, [r5, #0]
 8000d76:	b103      	cbz	r3, 8000d7a <_close_r+0x1a>
 8000d78:	6023      	str	r3, [r4, #0]
 8000d7a:	bd38      	pop	{r3, r4, r5, pc}
 8000d7c:	200014b8 	.word	0x200014b8

08000d80 <_lseek_r>:
 8000d80:	b538      	push	{r3, r4, r5, lr}
 8000d82:	4d07      	ldr	r5, [pc, #28]	@ (8000da0 <_lseek_r+0x20>)
 8000d84:	4604      	mov	r4, r0
 8000d86:	4608      	mov	r0, r1
 8000d88:	4611      	mov	r1, r2
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	602a      	str	r2, [r5, #0]
 8000d8e:	461a      	mov	r2, r3
 8000d90:	f7ff fdc3 	bl	800091a <_lseek>
 8000d94:	1c43      	adds	r3, r0, #1
 8000d96:	d102      	bne.n	8000d9e <_lseek_r+0x1e>
 8000d98:	682b      	ldr	r3, [r5, #0]
 8000d9a:	b103      	cbz	r3, 8000d9e <_lseek_r+0x1e>
 8000d9c:	6023      	str	r3, [r4, #0]
 8000d9e:	bd38      	pop	{r3, r4, r5, pc}
 8000da0:	200014b8 	.word	0x200014b8

08000da4 <_read_r>:
 8000da4:	b538      	push	{r3, r4, r5, lr}
 8000da6:	4d07      	ldr	r5, [pc, #28]	@ (8000dc4 <_read_r+0x20>)
 8000da8:	4604      	mov	r4, r0
 8000daa:	4608      	mov	r0, r1
 8000dac:	4611      	mov	r1, r2
 8000dae:	2200      	movs	r2, #0
 8000db0:	602a      	str	r2, [r5, #0]
 8000db2:	461a      	mov	r2, r3
 8000db4:	f7ff fd51 	bl	800085a <_read>
 8000db8:	1c43      	adds	r3, r0, #1
 8000dba:	d102      	bne.n	8000dc2 <_read_r+0x1e>
 8000dbc:	682b      	ldr	r3, [r5, #0]
 8000dbe:	b103      	cbz	r3, 8000dc2 <_read_r+0x1e>
 8000dc0:	6023      	str	r3, [r4, #0]
 8000dc2:	bd38      	pop	{r3, r4, r5, pc}
 8000dc4:	200014b8 	.word	0x200014b8

08000dc8 <_write_r>:
 8000dc8:	b538      	push	{r3, r4, r5, lr}
 8000dca:	4d07      	ldr	r5, [pc, #28]	@ (8000de8 <_write_r+0x20>)
 8000dcc:	4604      	mov	r4, r0
 8000dce:	4608      	mov	r0, r1
 8000dd0:	4611      	mov	r1, r2
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	602a      	str	r2, [r5, #0]
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	f7ff fd5c 	bl	8000894 <_write>
 8000ddc:	1c43      	adds	r3, r0, #1
 8000dde:	d102      	bne.n	8000de6 <_write_r+0x1e>
 8000de0:	682b      	ldr	r3, [r5, #0]
 8000de2:	b103      	cbz	r3, 8000de6 <_write_r+0x1e>
 8000de4:	6023      	str	r3, [r4, #0]
 8000de6:	bd38      	pop	{r3, r4, r5, pc}
 8000de8:	200014b8 	.word	0x200014b8

08000dec <__errno>:
 8000dec:	4b01      	ldr	r3, [pc, #4]	@ (8000df4 <__errno+0x8>)
 8000dee:	6818      	ldr	r0, [r3, #0]
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	2000000c 	.word	0x2000000c

08000df8 <__libc_init_array>:
 8000df8:	b570      	push	{r4, r5, r6, lr}
 8000dfa:	4d0d      	ldr	r5, [pc, #52]	@ (8000e30 <__libc_init_array+0x38>)
 8000dfc:	4c0d      	ldr	r4, [pc, #52]	@ (8000e34 <__libc_init_array+0x3c>)
 8000dfe:	1b64      	subs	r4, r4, r5
 8000e00:	10a4      	asrs	r4, r4, #2
 8000e02:	2600      	movs	r6, #0
 8000e04:	42a6      	cmp	r6, r4
 8000e06:	d109      	bne.n	8000e1c <__libc_init_array+0x24>
 8000e08:	4d0b      	ldr	r5, [pc, #44]	@ (8000e38 <__libc_init_array+0x40>)
 8000e0a:	4c0c      	ldr	r4, [pc, #48]	@ (8000e3c <__libc_init_array+0x44>)
 8000e0c:	f000 fdb8 	bl	8001980 <_init>
 8000e10:	1b64      	subs	r4, r4, r5
 8000e12:	10a4      	asrs	r4, r4, #2
 8000e14:	2600      	movs	r6, #0
 8000e16:	42a6      	cmp	r6, r4
 8000e18:	d105      	bne.n	8000e26 <__libc_init_array+0x2e>
 8000e1a:	bd70      	pop	{r4, r5, r6, pc}
 8000e1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e20:	4798      	blx	r3
 8000e22:	3601      	adds	r6, #1
 8000e24:	e7ee      	b.n	8000e04 <__libc_init_array+0xc>
 8000e26:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e2a:	4798      	blx	r3
 8000e2c:	3601      	adds	r6, #1
 8000e2e:	e7f2      	b.n	8000e16 <__libc_init_array+0x1e>
 8000e30:	08001a34 	.word	0x08001a34
 8000e34:	08001a34 	.word	0x08001a34
 8000e38:	08001a34 	.word	0x08001a34
 8000e3c:	08001a38 	.word	0x08001a38

08000e40 <__retarget_lock_init_recursive>:
 8000e40:	4770      	bx	lr

08000e42 <__retarget_lock_acquire_recursive>:
 8000e42:	4770      	bx	lr

08000e44 <__retarget_lock_release_recursive>:
 8000e44:	4770      	bx	lr
	...

08000e48 <_free_r>:
 8000e48:	b538      	push	{r3, r4, r5, lr}
 8000e4a:	4605      	mov	r5, r0
 8000e4c:	2900      	cmp	r1, #0
 8000e4e:	d041      	beq.n	8000ed4 <_free_r+0x8c>
 8000e50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000e54:	1f0c      	subs	r4, r1, #4
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	bfb8      	it	lt
 8000e5a:	18e4      	addlt	r4, r4, r3
 8000e5c:	f000 f8e0 	bl	8001020 <__malloc_lock>
 8000e60:	4a1d      	ldr	r2, [pc, #116]	@ (8000ed8 <_free_r+0x90>)
 8000e62:	6813      	ldr	r3, [r2, #0]
 8000e64:	b933      	cbnz	r3, 8000e74 <_free_r+0x2c>
 8000e66:	6063      	str	r3, [r4, #4]
 8000e68:	6014      	str	r4, [r2, #0]
 8000e6a:	4628      	mov	r0, r5
 8000e6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000e70:	f000 b8dc 	b.w	800102c <__malloc_unlock>
 8000e74:	42a3      	cmp	r3, r4
 8000e76:	d908      	bls.n	8000e8a <_free_r+0x42>
 8000e78:	6820      	ldr	r0, [r4, #0]
 8000e7a:	1821      	adds	r1, r4, r0
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	bf01      	itttt	eq
 8000e80:	6819      	ldreq	r1, [r3, #0]
 8000e82:	685b      	ldreq	r3, [r3, #4]
 8000e84:	1809      	addeq	r1, r1, r0
 8000e86:	6021      	streq	r1, [r4, #0]
 8000e88:	e7ed      	b.n	8000e66 <_free_r+0x1e>
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	b10b      	cbz	r3, 8000e94 <_free_r+0x4c>
 8000e90:	42a3      	cmp	r3, r4
 8000e92:	d9fa      	bls.n	8000e8a <_free_r+0x42>
 8000e94:	6811      	ldr	r1, [r2, #0]
 8000e96:	1850      	adds	r0, r2, r1
 8000e98:	42a0      	cmp	r0, r4
 8000e9a:	d10b      	bne.n	8000eb4 <_free_r+0x6c>
 8000e9c:	6820      	ldr	r0, [r4, #0]
 8000e9e:	4401      	add	r1, r0
 8000ea0:	1850      	adds	r0, r2, r1
 8000ea2:	4283      	cmp	r3, r0
 8000ea4:	6011      	str	r1, [r2, #0]
 8000ea6:	d1e0      	bne.n	8000e6a <_free_r+0x22>
 8000ea8:	6818      	ldr	r0, [r3, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	6053      	str	r3, [r2, #4]
 8000eae:	4408      	add	r0, r1
 8000eb0:	6010      	str	r0, [r2, #0]
 8000eb2:	e7da      	b.n	8000e6a <_free_r+0x22>
 8000eb4:	d902      	bls.n	8000ebc <_free_r+0x74>
 8000eb6:	230c      	movs	r3, #12
 8000eb8:	602b      	str	r3, [r5, #0]
 8000eba:	e7d6      	b.n	8000e6a <_free_r+0x22>
 8000ebc:	6820      	ldr	r0, [r4, #0]
 8000ebe:	1821      	adds	r1, r4, r0
 8000ec0:	428b      	cmp	r3, r1
 8000ec2:	bf04      	itt	eq
 8000ec4:	6819      	ldreq	r1, [r3, #0]
 8000ec6:	685b      	ldreq	r3, [r3, #4]
 8000ec8:	6063      	str	r3, [r4, #4]
 8000eca:	bf04      	itt	eq
 8000ecc:	1809      	addeq	r1, r1, r0
 8000ece:	6021      	streq	r1, [r4, #0]
 8000ed0:	6054      	str	r4, [r2, #4]
 8000ed2:	e7ca      	b.n	8000e6a <_free_r+0x22>
 8000ed4:	bd38      	pop	{r3, r4, r5, pc}
 8000ed6:	bf00      	nop
 8000ed8:	200014c4 	.word	0x200014c4

08000edc <sbrk_aligned>:
 8000edc:	b570      	push	{r4, r5, r6, lr}
 8000ede:	4e0f      	ldr	r6, [pc, #60]	@ (8000f1c <sbrk_aligned+0x40>)
 8000ee0:	460c      	mov	r4, r1
 8000ee2:	6831      	ldr	r1, [r6, #0]
 8000ee4:	4605      	mov	r5, r0
 8000ee6:	b911      	cbnz	r1, 8000eee <sbrk_aligned+0x12>
 8000ee8:	f000 fcb6 	bl	8001858 <_sbrk_r>
 8000eec:	6030      	str	r0, [r6, #0]
 8000eee:	4621      	mov	r1, r4
 8000ef0:	4628      	mov	r0, r5
 8000ef2:	f000 fcb1 	bl	8001858 <_sbrk_r>
 8000ef6:	1c43      	adds	r3, r0, #1
 8000ef8:	d103      	bne.n	8000f02 <sbrk_aligned+0x26>
 8000efa:	f04f 34ff 	mov.w	r4, #4294967295
 8000efe:	4620      	mov	r0, r4
 8000f00:	bd70      	pop	{r4, r5, r6, pc}
 8000f02:	1cc4      	adds	r4, r0, #3
 8000f04:	f024 0403 	bic.w	r4, r4, #3
 8000f08:	42a0      	cmp	r0, r4
 8000f0a:	d0f8      	beq.n	8000efe <sbrk_aligned+0x22>
 8000f0c:	1a21      	subs	r1, r4, r0
 8000f0e:	4628      	mov	r0, r5
 8000f10:	f000 fca2 	bl	8001858 <_sbrk_r>
 8000f14:	3001      	adds	r0, #1
 8000f16:	d1f2      	bne.n	8000efe <sbrk_aligned+0x22>
 8000f18:	e7ef      	b.n	8000efa <sbrk_aligned+0x1e>
 8000f1a:	bf00      	nop
 8000f1c:	200014c0 	.word	0x200014c0

08000f20 <_malloc_r>:
 8000f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000f24:	1ccd      	adds	r5, r1, #3
 8000f26:	f025 0503 	bic.w	r5, r5, #3
 8000f2a:	3508      	adds	r5, #8
 8000f2c:	2d0c      	cmp	r5, #12
 8000f2e:	bf38      	it	cc
 8000f30:	250c      	movcc	r5, #12
 8000f32:	2d00      	cmp	r5, #0
 8000f34:	4606      	mov	r6, r0
 8000f36:	db01      	blt.n	8000f3c <_malloc_r+0x1c>
 8000f38:	42a9      	cmp	r1, r5
 8000f3a:	d904      	bls.n	8000f46 <_malloc_r+0x26>
 8000f3c:	230c      	movs	r3, #12
 8000f3e:	6033      	str	r3, [r6, #0]
 8000f40:	2000      	movs	r0, #0
 8000f42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000f46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800101c <_malloc_r+0xfc>
 8000f4a:	f000 f869 	bl	8001020 <__malloc_lock>
 8000f4e:	f8d8 3000 	ldr.w	r3, [r8]
 8000f52:	461c      	mov	r4, r3
 8000f54:	bb44      	cbnz	r4, 8000fa8 <_malloc_r+0x88>
 8000f56:	4629      	mov	r1, r5
 8000f58:	4630      	mov	r0, r6
 8000f5a:	f7ff ffbf 	bl	8000edc <sbrk_aligned>
 8000f5e:	1c43      	adds	r3, r0, #1
 8000f60:	4604      	mov	r4, r0
 8000f62:	d158      	bne.n	8001016 <_malloc_r+0xf6>
 8000f64:	f8d8 4000 	ldr.w	r4, [r8]
 8000f68:	4627      	mov	r7, r4
 8000f6a:	2f00      	cmp	r7, #0
 8000f6c:	d143      	bne.n	8000ff6 <_malloc_r+0xd6>
 8000f6e:	2c00      	cmp	r4, #0
 8000f70:	d04b      	beq.n	800100a <_malloc_r+0xea>
 8000f72:	6823      	ldr	r3, [r4, #0]
 8000f74:	4639      	mov	r1, r7
 8000f76:	4630      	mov	r0, r6
 8000f78:	eb04 0903 	add.w	r9, r4, r3
 8000f7c:	f000 fc6c 	bl	8001858 <_sbrk_r>
 8000f80:	4581      	cmp	r9, r0
 8000f82:	d142      	bne.n	800100a <_malloc_r+0xea>
 8000f84:	6821      	ldr	r1, [r4, #0]
 8000f86:	1a6d      	subs	r5, r5, r1
 8000f88:	4629      	mov	r1, r5
 8000f8a:	4630      	mov	r0, r6
 8000f8c:	f7ff ffa6 	bl	8000edc <sbrk_aligned>
 8000f90:	3001      	adds	r0, #1
 8000f92:	d03a      	beq.n	800100a <_malloc_r+0xea>
 8000f94:	6823      	ldr	r3, [r4, #0]
 8000f96:	442b      	add	r3, r5
 8000f98:	6023      	str	r3, [r4, #0]
 8000f9a:	f8d8 3000 	ldr.w	r3, [r8]
 8000f9e:	685a      	ldr	r2, [r3, #4]
 8000fa0:	bb62      	cbnz	r2, 8000ffc <_malloc_r+0xdc>
 8000fa2:	f8c8 7000 	str.w	r7, [r8]
 8000fa6:	e00f      	b.n	8000fc8 <_malloc_r+0xa8>
 8000fa8:	6822      	ldr	r2, [r4, #0]
 8000faa:	1b52      	subs	r2, r2, r5
 8000fac:	d420      	bmi.n	8000ff0 <_malloc_r+0xd0>
 8000fae:	2a0b      	cmp	r2, #11
 8000fb0:	d917      	bls.n	8000fe2 <_malloc_r+0xc2>
 8000fb2:	1961      	adds	r1, r4, r5
 8000fb4:	42a3      	cmp	r3, r4
 8000fb6:	6025      	str	r5, [r4, #0]
 8000fb8:	bf18      	it	ne
 8000fba:	6059      	strne	r1, [r3, #4]
 8000fbc:	6863      	ldr	r3, [r4, #4]
 8000fbe:	bf08      	it	eq
 8000fc0:	f8c8 1000 	streq.w	r1, [r8]
 8000fc4:	5162      	str	r2, [r4, r5]
 8000fc6:	604b      	str	r3, [r1, #4]
 8000fc8:	4630      	mov	r0, r6
 8000fca:	f000 f82f 	bl	800102c <__malloc_unlock>
 8000fce:	f104 000b 	add.w	r0, r4, #11
 8000fd2:	1d23      	adds	r3, r4, #4
 8000fd4:	f020 0007 	bic.w	r0, r0, #7
 8000fd8:	1ac2      	subs	r2, r0, r3
 8000fda:	bf1c      	itt	ne
 8000fdc:	1a1b      	subne	r3, r3, r0
 8000fde:	50a3      	strne	r3, [r4, r2]
 8000fe0:	e7af      	b.n	8000f42 <_malloc_r+0x22>
 8000fe2:	6862      	ldr	r2, [r4, #4]
 8000fe4:	42a3      	cmp	r3, r4
 8000fe6:	bf0c      	ite	eq
 8000fe8:	f8c8 2000 	streq.w	r2, [r8]
 8000fec:	605a      	strne	r2, [r3, #4]
 8000fee:	e7eb      	b.n	8000fc8 <_malloc_r+0xa8>
 8000ff0:	4623      	mov	r3, r4
 8000ff2:	6864      	ldr	r4, [r4, #4]
 8000ff4:	e7ae      	b.n	8000f54 <_malloc_r+0x34>
 8000ff6:	463c      	mov	r4, r7
 8000ff8:	687f      	ldr	r7, [r7, #4]
 8000ffa:	e7b6      	b.n	8000f6a <_malloc_r+0x4a>
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	42a3      	cmp	r3, r4
 8001002:	d1fb      	bne.n	8000ffc <_malloc_r+0xdc>
 8001004:	2300      	movs	r3, #0
 8001006:	6053      	str	r3, [r2, #4]
 8001008:	e7de      	b.n	8000fc8 <_malloc_r+0xa8>
 800100a:	230c      	movs	r3, #12
 800100c:	6033      	str	r3, [r6, #0]
 800100e:	4630      	mov	r0, r6
 8001010:	f000 f80c 	bl	800102c <__malloc_unlock>
 8001014:	e794      	b.n	8000f40 <_malloc_r+0x20>
 8001016:	6005      	str	r5, [r0, #0]
 8001018:	e7d6      	b.n	8000fc8 <_malloc_r+0xa8>
 800101a:	bf00      	nop
 800101c:	200014c4 	.word	0x200014c4

08001020 <__malloc_lock>:
 8001020:	4801      	ldr	r0, [pc, #4]	@ (8001028 <__malloc_lock+0x8>)
 8001022:	f7ff bf0e 	b.w	8000e42 <__retarget_lock_acquire_recursive>
 8001026:	bf00      	nop
 8001028:	200014bc 	.word	0x200014bc

0800102c <__malloc_unlock>:
 800102c:	4801      	ldr	r0, [pc, #4]	@ (8001034 <__malloc_unlock+0x8>)
 800102e:	f7ff bf09 	b.w	8000e44 <__retarget_lock_release_recursive>
 8001032:	bf00      	nop
 8001034:	200014bc 	.word	0x200014bc

08001038 <__sfputc_r>:
 8001038:	6893      	ldr	r3, [r2, #8]
 800103a:	3b01      	subs	r3, #1
 800103c:	2b00      	cmp	r3, #0
 800103e:	b410      	push	{r4}
 8001040:	6093      	str	r3, [r2, #8]
 8001042:	da08      	bge.n	8001056 <__sfputc_r+0x1e>
 8001044:	6994      	ldr	r4, [r2, #24]
 8001046:	42a3      	cmp	r3, r4
 8001048:	db01      	blt.n	800104e <__sfputc_r+0x16>
 800104a:	290a      	cmp	r1, #10
 800104c:	d103      	bne.n	8001056 <__sfputc_r+0x1e>
 800104e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001052:	f000 bb6d 	b.w	8001730 <__swbuf_r>
 8001056:	6813      	ldr	r3, [r2, #0]
 8001058:	1c58      	adds	r0, r3, #1
 800105a:	6010      	str	r0, [r2, #0]
 800105c:	7019      	strb	r1, [r3, #0]
 800105e:	4608      	mov	r0, r1
 8001060:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001064:	4770      	bx	lr

08001066 <__sfputs_r>:
 8001066:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001068:	4606      	mov	r6, r0
 800106a:	460f      	mov	r7, r1
 800106c:	4614      	mov	r4, r2
 800106e:	18d5      	adds	r5, r2, r3
 8001070:	42ac      	cmp	r4, r5
 8001072:	d101      	bne.n	8001078 <__sfputs_r+0x12>
 8001074:	2000      	movs	r0, #0
 8001076:	e007      	b.n	8001088 <__sfputs_r+0x22>
 8001078:	f814 1b01 	ldrb.w	r1, [r4], #1
 800107c:	463a      	mov	r2, r7
 800107e:	4630      	mov	r0, r6
 8001080:	f7ff ffda 	bl	8001038 <__sfputc_r>
 8001084:	1c43      	adds	r3, r0, #1
 8001086:	d1f3      	bne.n	8001070 <__sfputs_r+0xa>
 8001088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800108c <_vfiprintf_r>:
 800108c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001090:	460d      	mov	r5, r1
 8001092:	b09d      	sub	sp, #116	@ 0x74
 8001094:	4614      	mov	r4, r2
 8001096:	4698      	mov	r8, r3
 8001098:	4606      	mov	r6, r0
 800109a:	b118      	cbz	r0, 80010a4 <_vfiprintf_r+0x18>
 800109c:	6a03      	ldr	r3, [r0, #32]
 800109e:	b90b      	cbnz	r3, 80010a4 <_vfiprintf_r+0x18>
 80010a0:	f7ff fdca 	bl	8000c38 <__sinit>
 80010a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80010a6:	07d9      	lsls	r1, r3, #31
 80010a8:	d405      	bmi.n	80010b6 <_vfiprintf_r+0x2a>
 80010aa:	89ab      	ldrh	r3, [r5, #12]
 80010ac:	059a      	lsls	r2, r3, #22
 80010ae:	d402      	bmi.n	80010b6 <_vfiprintf_r+0x2a>
 80010b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80010b2:	f7ff fec6 	bl	8000e42 <__retarget_lock_acquire_recursive>
 80010b6:	89ab      	ldrh	r3, [r5, #12]
 80010b8:	071b      	lsls	r3, r3, #28
 80010ba:	d501      	bpl.n	80010c0 <_vfiprintf_r+0x34>
 80010bc:	692b      	ldr	r3, [r5, #16]
 80010be:	b99b      	cbnz	r3, 80010e8 <_vfiprintf_r+0x5c>
 80010c0:	4629      	mov	r1, r5
 80010c2:	4630      	mov	r0, r6
 80010c4:	f000 fb72 	bl	80017ac <__swsetup_r>
 80010c8:	b170      	cbz	r0, 80010e8 <_vfiprintf_r+0x5c>
 80010ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80010cc:	07dc      	lsls	r4, r3, #31
 80010ce:	d504      	bpl.n	80010da <_vfiprintf_r+0x4e>
 80010d0:	f04f 30ff 	mov.w	r0, #4294967295
 80010d4:	b01d      	add	sp, #116	@ 0x74
 80010d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80010da:	89ab      	ldrh	r3, [r5, #12]
 80010dc:	0598      	lsls	r0, r3, #22
 80010de:	d4f7      	bmi.n	80010d0 <_vfiprintf_r+0x44>
 80010e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80010e2:	f7ff feaf 	bl	8000e44 <__retarget_lock_release_recursive>
 80010e6:	e7f3      	b.n	80010d0 <_vfiprintf_r+0x44>
 80010e8:	2300      	movs	r3, #0
 80010ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80010ec:	2320      	movs	r3, #32
 80010ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80010f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80010f6:	2330      	movs	r3, #48	@ 0x30
 80010f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80012a8 <_vfiprintf_r+0x21c>
 80010fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001100:	f04f 0901 	mov.w	r9, #1
 8001104:	4623      	mov	r3, r4
 8001106:	469a      	mov	sl, r3
 8001108:	f813 2b01 	ldrb.w	r2, [r3], #1
 800110c:	b10a      	cbz	r2, 8001112 <_vfiprintf_r+0x86>
 800110e:	2a25      	cmp	r2, #37	@ 0x25
 8001110:	d1f9      	bne.n	8001106 <_vfiprintf_r+0x7a>
 8001112:	ebba 0b04 	subs.w	fp, sl, r4
 8001116:	d00b      	beq.n	8001130 <_vfiprintf_r+0xa4>
 8001118:	465b      	mov	r3, fp
 800111a:	4622      	mov	r2, r4
 800111c:	4629      	mov	r1, r5
 800111e:	4630      	mov	r0, r6
 8001120:	f7ff ffa1 	bl	8001066 <__sfputs_r>
 8001124:	3001      	adds	r0, #1
 8001126:	f000 80a7 	beq.w	8001278 <_vfiprintf_r+0x1ec>
 800112a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800112c:	445a      	add	r2, fp
 800112e:	9209      	str	r2, [sp, #36]	@ 0x24
 8001130:	f89a 3000 	ldrb.w	r3, [sl]
 8001134:	2b00      	cmp	r3, #0
 8001136:	f000 809f 	beq.w	8001278 <_vfiprintf_r+0x1ec>
 800113a:	2300      	movs	r3, #0
 800113c:	f04f 32ff 	mov.w	r2, #4294967295
 8001140:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001144:	f10a 0a01 	add.w	sl, sl, #1
 8001148:	9304      	str	r3, [sp, #16]
 800114a:	9307      	str	r3, [sp, #28]
 800114c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001150:	931a      	str	r3, [sp, #104]	@ 0x68
 8001152:	4654      	mov	r4, sl
 8001154:	2205      	movs	r2, #5
 8001156:	f814 1b01 	ldrb.w	r1, [r4], #1
 800115a:	4853      	ldr	r0, [pc, #332]	@ (80012a8 <_vfiprintf_r+0x21c>)
 800115c:	f7ff f840 	bl	80001e0 <memchr>
 8001160:	9a04      	ldr	r2, [sp, #16]
 8001162:	b9d8      	cbnz	r0, 800119c <_vfiprintf_r+0x110>
 8001164:	06d1      	lsls	r1, r2, #27
 8001166:	bf44      	itt	mi
 8001168:	2320      	movmi	r3, #32
 800116a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800116e:	0713      	lsls	r3, r2, #28
 8001170:	bf44      	itt	mi
 8001172:	232b      	movmi	r3, #43	@ 0x2b
 8001174:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001178:	f89a 3000 	ldrb.w	r3, [sl]
 800117c:	2b2a      	cmp	r3, #42	@ 0x2a
 800117e:	d015      	beq.n	80011ac <_vfiprintf_r+0x120>
 8001180:	9a07      	ldr	r2, [sp, #28]
 8001182:	4654      	mov	r4, sl
 8001184:	2000      	movs	r0, #0
 8001186:	f04f 0c0a 	mov.w	ip, #10
 800118a:	4621      	mov	r1, r4
 800118c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001190:	3b30      	subs	r3, #48	@ 0x30
 8001192:	2b09      	cmp	r3, #9
 8001194:	d94b      	bls.n	800122e <_vfiprintf_r+0x1a2>
 8001196:	b1b0      	cbz	r0, 80011c6 <_vfiprintf_r+0x13a>
 8001198:	9207      	str	r2, [sp, #28]
 800119a:	e014      	b.n	80011c6 <_vfiprintf_r+0x13a>
 800119c:	eba0 0308 	sub.w	r3, r0, r8
 80011a0:	fa09 f303 	lsl.w	r3, r9, r3
 80011a4:	4313      	orrs	r3, r2
 80011a6:	9304      	str	r3, [sp, #16]
 80011a8:	46a2      	mov	sl, r4
 80011aa:	e7d2      	b.n	8001152 <_vfiprintf_r+0xc6>
 80011ac:	9b03      	ldr	r3, [sp, #12]
 80011ae:	1d19      	adds	r1, r3, #4
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	9103      	str	r1, [sp, #12]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	bfbb      	ittet	lt
 80011b8:	425b      	neglt	r3, r3
 80011ba:	f042 0202 	orrlt.w	r2, r2, #2
 80011be:	9307      	strge	r3, [sp, #28]
 80011c0:	9307      	strlt	r3, [sp, #28]
 80011c2:	bfb8      	it	lt
 80011c4:	9204      	strlt	r2, [sp, #16]
 80011c6:	7823      	ldrb	r3, [r4, #0]
 80011c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80011ca:	d10a      	bne.n	80011e2 <_vfiprintf_r+0x156>
 80011cc:	7863      	ldrb	r3, [r4, #1]
 80011ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80011d0:	d132      	bne.n	8001238 <_vfiprintf_r+0x1ac>
 80011d2:	9b03      	ldr	r3, [sp, #12]
 80011d4:	1d1a      	adds	r2, r3, #4
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	9203      	str	r2, [sp, #12]
 80011da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80011de:	3402      	adds	r4, #2
 80011e0:	9305      	str	r3, [sp, #20]
 80011e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80012b8 <_vfiprintf_r+0x22c>
 80011e6:	7821      	ldrb	r1, [r4, #0]
 80011e8:	2203      	movs	r2, #3
 80011ea:	4650      	mov	r0, sl
 80011ec:	f7fe fff8 	bl	80001e0 <memchr>
 80011f0:	b138      	cbz	r0, 8001202 <_vfiprintf_r+0x176>
 80011f2:	9b04      	ldr	r3, [sp, #16]
 80011f4:	eba0 000a 	sub.w	r0, r0, sl
 80011f8:	2240      	movs	r2, #64	@ 0x40
 80011fa:	4082      	lsls	r2, r0
 80011fc:	4313      	orrs	r3, r2
 80011fe:	3401      	adds	r4, #1
 8001200:	9304      	str	r3, [sp, #16]
 8001202:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001206:	4829      	ldr	r0, [pc, #164]	@ (80012ac <_vfiprintf_r+0x220>)
 8001208:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800120c:	2206      	movs	r2, #6
 800120e:	f7fe ffe7 	bl	80001e0 <memchr>
 8001212:	2800      	cmp	r0, #0
 8001214:	d03f      	beq.n	8001296 <_vfiprintf_r+0x20a>
 8001216:	4b26      	ldr	r3, [pc, #152]	@ (80012b0 <_vfiprintf_r+0x224>)
 8001218:	bb1b      	cbnz	r3, 8001262 <_vfiprintf_r+0x1d6>
 800121a:	9b03      	ldr	r3, [sp, #12]
 800121c:	3307      	adds	r3, #7
 800121e:	f023 0307 	bic.w	r3, r3, #7
 8001222:	3308      	adds	r3, #8
 8001224:	9303      	str	r3, [sp, #12]
 8001226:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001228:	443b      	add	r3, r7
 800122a:	9309      	str	r3, [sp, #36]	@ 0x24
 800122c:	e76a      	b.n	8001104 <_vfiprintf_r+0x78>
 800122e:	fb0c 3202 	mla	r2, ip, r2, r3
 8001232:	460c      	mov	r4, r1
 8001234:	2001      	movs	r0, #1
 8001236:	e7a8      	b.n	800118a <_vfiprintf_r+0xfe>
 8001238:	2300      	movs	r3, #0
 800123a:	3401      	adds	r4, #1
 800123c:	9305      	str	r3, [sp, #20]
 800123e:	4619      	mov	r1, r3
 8001240:	f04f 0c0a 	mov.w	ip, #10
 8001244:	4620      	mov	r0, r4
 8001246:	f810 2b01 	ldrb.w	r2, [r0], #1
 800124a:	3a30      	subs	r2, #48	@ 0x30
 800124c:	2a09      	cmp	r2, #9
 800124e:	d903      	bls.n	8001258 <_vfiprintf_r+0x1cc>
 8001250:	2b00      	cmp	r3, #0
 8001252:	d0c6      	beq.n	80011e2 <_vfiprintf_r+0x156>
 8001254:	9105      	str	r1, [sp, #20]
 8001256:	e7c4      	b.n	80011e2 <_vfiprintf_r+0x156>
 8001258:	fb0c 2101 	mla	r1, ip, r1, r2
 800125c:	4604      	mov	r4, r0
 800125e:	2301      	movs	r3, #1
 8001260:	e7f0      	b.n	8001244 <_vfiprintf_r+0x1b8>
 8001262:	ab03      	add	r3, sp, #12
 8001264:	9300      	str	r3, [sp, #0]
 8001266:	462a      	mov	r2, r5
 8001268:	4b12      	ldr	r3, [pc, #72]	@ (80012b4 <_vfiprintf_r+0x228>)
 800126a:	a904      	add	r1, sp, #16
 800126c:	4630      	mov	r0, r6
 800126e:	f3af 8000 	nop.w
 8001272:	4607      	mov	r7, r0
 8001274:	1c78      	adds	r0, r7, #1
 8001276:	d1d6      	bne.n	8001226 <_vfiprintf_r+0x19a>
 8001278:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800127a:	07d9      	lsls	r1, r3, #31
 800127c:	d405      	bmi.n	800128a <_vfiprintf_r+0x1fe>
 800127e:	89ab      	ldrh	r3, [r5, #12]
 8001280:	059a      	lsls	r2, r3, #22
 8001282:	d402      	bmi.n	800128a <_vfiprintf_r+0x1fe>
 8001284:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001286:	f7ff fddd 	bl	8000e44 <__retarget_lock_release_recursive>
 800128a:	89ab      	ldrh	r3, [r5, #12]
 800128c:	065b      	lsls	r3, r3, #25
 800128e:	f53f af1f 	bmi.w	80010d0 <_vfiprintf_r+0x44>
 8001292:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001294:	e71e      	b.n	80010d4 <_vfiprintf_r+0x48>
 8001296:	ab03      	add	r3, sp, #12
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	462a      	mov	r2, r5
 800129c:	4b05      	ldr	r3, [pc, #20]	@ (80012b4 <_vfiprintf_r+0x228>)
 800129e:	a904      	add	r1, sp, #16
 80012a0:	4630      	mov	r0, r6
 80012a2:	f000 f879 	bl	8001398 <_printf_i>
 80012a6:	e7e4      	b.n	8001272 <_vfiprintf_r+0x1e6>
 80012a8:	080019f6 	.word	0x080019f6
 80012ac:	08001a00 	.word	0x08001a00
 80012b0:	00000000 	.word	0x00000000
 80012b4:	08001067 	.word	0x08001067
 80012b8:	080019fc 	.word	0x080019fc

080012bc <_printf_common>:
 80012bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80012c0:	4616      	mov	r6, r2
 80012c2:	4698      	mov	r8, r3
 80012c4:	688a      	ldr	r2, [r1, #8]
 80012c6:	690b      	ldr	r3, [r1, #16]
 80012c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80012cc:	4293      	cmp	r3, r2
 80012ce:	bfb8      	it	lt
 80012d0:	4613      	movlt	r3, r2
 80012d2:	6033      	str	r3, [r6, #0]
 80012d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80012d8:	4607      	mov	r7, r0
 80012da:	460c      	mov	r4, r1
 80012dc:	b10a      	cbz	r2, 80012e2 <_printf_common+0x26>
 80012de:	3301      	adds	r3, #1
 80012e0:	6033      	str	r3, [r6, #0]
 80012e2:	6823      	ldr	r3, [r4, #0]
 80012e4:	0699      	lsls	r1, r3, #26
 80012e6:	bf42      	ittt	mi
 80012e8:	6833      	ldrmi	r3, [r6, #0]
 80012ea:	3302      	addmi	r3, #2
 80012ec:	6033      	strmi	r3, [r6, #0]
 80012ee:	6825      	ldr	r5, [r4, #0]
 80012f0:	f015 0506 	ands.w	r5, r5, #6
 80012f4:	d106      	bne.n	8001304 <_printf_common+0x48>
 80012f6:	f104 0a19 	add.w	sl, r4, #25
 80012fa:	68e3      	ldr	r3, [r4, #12]
 80012fc:	6832      	ldr	r2, [r6, #0]
 80012fe:	1a9b      	subs	r3, r3, r2
 8001300:	42ab      	cmp	r3, r5
 8001302:	dc26      	bgt.n	8001352 <_printf_common+0x96>
 8001304:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001308:	6822      	ldr	r2, [r4, #0]
 800130a:	3b00      	subs	r3, #0
 800130c:	bf18      	it	ne
 800130e:	2301      	movne	r3, #1
 8001310:	0692      	lsls	r2, r2, #26
 8001312:	d42b      	bmi.n	800136c <_printf_common+0xb0>
 8001314:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001318:	4641      	mov	r1, r8
 800131a:	4638      	mov	r0, r7
 800131c:	47c8      	blx	r9
 800131e:	3001      	adds	r0, #1
 8001320:	d01e      	beq.n	8001360 <_printf_common+0xa4>
 8001322:	6823      	ldr	r3, [r4, #0]
 8001324:	6922      	ldr	r2, [r4, #16]
 8001326:	f003 0306 	and.w	r3, r3, #6
 800132a:	2b04      	cmp	r3, #4
 800132c:	bf02      	ittt	eq
 800132e:	68e5      	ldreq	r5, [r4, #12]
 8001330:	6833      	ldreq	r3, [r6, #0]
 8001332:	1aed      	subeq	r5, r5, r3
 8001334:	68a3      	ldr	r3, [r4, #8]
 8001336:	bf0c      	ite	eq
 8001338:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800133c:	2500      	movne	r5, #0
 800133e:	4293      	cmp	r3, r2
 8001340:	bfc4      	itt	gt
 8001342:	1a9b      	subgt	r3, r3, r2
 8001344:	18ed      	addgt	r5, r5, r3
 8001346:	2600      	movs	r6, #0
 8001348:	341a      	adds	r4, #26
 800134a:	42b5      	cmp	r5, r6
 800134c:	d11a      	bne.n	8001384 <_printf_common+0xc8>
 800134e:	2000      	movs	r0, #0
 8001350:	e008      	b.n	8001364 <_printf_common+0xa8>
 8001352:	2301      	movs	r3, #1
 8001354:	4652      	mov	r2, sl
 8001356:	4641      	mov	r1, r8
 8001358:	4638      	mov	r0, r7
 800135a:	47c8      	blx	r9
 800135c:	3001      	adds	r0, #1
 800135e:	d103      	bne.n	8001368 <_printf_common+0xac>
 8001360:	f04f 30ff 	mov.w	r0, #4294967295
 8001364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001368:	3501      	adds	r5, #1
 800136a:	e7c6      	b.n	80012fa <_printf_common+0x3e>
 800136c:	18e1      	adds	r1, r4, r3
 800136e:	1c5a      	adds	r2, r3, #1
 8001370:	2030      	movs	r0, #48	@ 0x30
 8001372:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001376:	4422      	add	r2, r4
 8001378:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800137c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001380:	3302      	adds	r3, #2
 8001382:	e7c7      	b.n	8001314 <_printf_common+0x58>
 8001384:	2301      	movs	r3, #1
 8001386:	4622      	mov	r2, r4
 8001388:	4641      	mov	r1, r8
 800138a:	4638      	mov	r0, r7
 800138c:	47c8      	blx	r9
 800138e:	3001      	adds	r0, #1
 8001390:	d0e6      	beq.n	8001360 <_printf_common+0xa4>
 8001392:	3601      	adds	r6, #1
 8001394:	e7d9      	b.n	800134a <_printf_common+0x8e>
	...

08001398 <_printf_i>:
 8001398:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800139c:	7e0f      	ldrb	r7, [r1, #24]
 800139e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80013a0:	2f78      	cmp	r7, #120	@ 0x78
 80013a2:	4691      	mov	r9, r2
 80013a4:	4680      	mov	r8, r0
 80013a6:	460c      	mov	r4, r1
 80013a8:	469a      	mov	sl, r3
 80013aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80013ae:	d807      	bhi.n	80013c0 <_printf_i+0x28>
 80013b0:	2f62      	cmp	r7, #98	@ 0x62
 80013b2:	d80a      	bhi.n	80013ca <_printf_i+0x32>
 80013b4:	2f00      	cmp	r7, #0
 80013b6:	f000 80d2 	beq.w	800155e <_printf_i+0x1c6>
 80013ba:	2f58      	cmp	r7, #88	@ 0x58
 80013bc:	f000 80b9 	beq.w	8001532 <_printf_i+0x19a>
 80013c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80013c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80013c8:	e03a      	b.n	8001440 <_printf_i+0xa8>
 80013ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80013ce:	2b15      	cmp	r3, #21
 80013d0:	d8f6      	bhi.n	80013c0 <_printf_i+0x28>
 80013d2:	a101      	add	r1, pc, #4	@ (adr r1, 80013d8 <_printf_i+0x40>)
 80013d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80013d8:	08001431 	.word	0x08001431
 80013dc:	08001445 	.word	0x08001445
 80013e0:	080013c1 	.word	0x080013c1
 80013e4:	080013c1 	.word	0x080013c1
 80013e8:	080013c1 	.word	0x080013c1
 80013ec:	080013c1 	.word	0x080013c1
 80013f0:	08001445 	.word	0x08001445
 80013f4:	080013c1 	.word	0x080013c1
 80013f8:	080013c1 	.word	0x080013c1
 80013fc:	080013c1 	.word	0x080013c1
 8001400:	080013c1 	.word	0x080013c1
 8001404:	08001545 	.word	0x08001545
 8001408:	0800146f 	.word	0x0800146f
 800140c:	080014ff 	.word	0x080014ff
 8001410:	080013c1 	.word	0x080013c1
 8001414:	080013c1 	.word	0x080013c1
 8001418:	08001567 	.word	0x08001567
 800141c:	080013c1 	.word	0x080013c1
 8001420:	0800146f 	.word	0x0800146f
 8001424:	080013c1 	.word	0x080013c1
 8001428:	080013c1 	.word	0x080013c1
 800142c:	08001507 	.word	0x08001507
 8001430:	6833      	ldr	r3, [r6, #0]
 8001432:	1d1a      	adds	r2, r3, #4
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	6032      	str	r2, [r6, #0]
 8001438:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800143c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001440:	2301      	movs	r3, #1
 8001442:	e09d      	b.n	8001580 <_printf_i+0x1e8>
 8001444:	6833      	ldr	r3, [r6, #0]
 8001446:	6820      	ldr	r0, [r4, #0]
 8001448:	1d19      	adds	r1, r3, #4
 800144a:	6031      	str	r1, [r6, #0]
 800144c:	0606      	lsls	r6, r0, #24
 800144e:	d501      	bpl.n	8001454 <_printf_i+0xbc>
 8001450:	681d      	ldr	r5, [r3, #0]
 8001452:	e003      	b.n	800145c <_printf_i+0xc4>
 8001454:	0645      	lsls	r5, r0, #25
 8001456:	d5fb      	bpl.n	8001450 <_printf_i+0xb8>
 8001458:	f9b3 5000 	ldrsh.w	r5, [r3]
 800145c:	2d00      	cmp	r5, #0
 800145e:	da03      	bge.n	8001468 <_printf_i+0xd0>
 8001460:	232d      	movs	r3, #45	@ 0x2d
 8001462:	426d      	negs	r5, r5
 8001464:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001468:	4859      	ldr	r0, [pc, #356]	@ (80015d0 <_printf_i+0x238>)
 800146a:	230a      	movs	r3, #10
 800146c:	e011      	b.n	8001492 <_printf_i+0xfa>
 800146e:	6821      	ldr	r1, [r4, #0]
 8001470:	6833      	ldr	r3, [r6, #0]
 8001472:	0608      	lsls	r0, r1, #24
 8001474:	f853 5b04 	ldr.w	r5, [r3], #4
 8001478:	d402      	bmi.n	8001480 <_printf_i+0xe8>
 800147a:	0649      	lsls	r1, r1, #25
 800147c:	bf48      	it	mi
 800147e:	b2ad      	uxthmi	r5, r5
 8001480:	2f6f      	cmp	r7, #111	@ 0x6f
 8001482:	4853      	ldr	r0, [pc, #332]	@ (80015d0 <_printf_i+0x238>)
 8001484:	6033      	str	r3, [r6, #0]
 8001486:	bf14      	ite	ne
 8001488:	230a      	movne	r3, #10
 800148a:	2308      	moveq	r3, #8
 800148c:	2100      	movs	r1, #0
 800148e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001492:	6866      	ldr	r6, [r4, #4]
 8001494:	60a6      	str	r6, [r4, #8]
 8001496:	2e00      	cmp	r6, #0
 8001498:	bfa2      	ittt	ge
 800149a:	6821      	ldrge	r1, [r4, #0]
 800149c:	f021 0104 	bicge.w	r1, r1, #4
 80014a0:	6021      	strge	r1, [r4, #0]
 80014a2:	b90d      	cbnz	r5, 80014a8 <_printf_i+0x110>
 80014a4:	2e00      	cmp	r6, #0
 80014a6:	d04b      	beq.n	8001540 <_printf_i+0x1a8>
 80014a8:	4616      	mov	r6, r2
 80014aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80014ae:	fb03 5711 	mls	r7, r3, r1, r5
 80014b2:	5dc7      	ldrb	r7, [r0, r7]
 80014b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80014b8:	462f      	mov	r7, r5
 80014ba:	42bb      	cmp	r3, r7
 80014bc:	460d      	mov	r5, r1
 80014be:	d9f4      	bls.n	80014aa <_printf_i+0x112>
 80014c0:	2b08      	cmp	r3, #8
 80014c2:	d10b      	bne.n	80014dc <_printf_i+0x144>
 80014c4:	6823      	ldr	r3, [r4, #0]
 80014c6:	07df      	lsls	r7, r3, #31
 80014c8:	d508      	bpl.n	80014dc <_printf_i+0x144>
 80014ca:	6923      	ldr	r3, [r4, #16]
 80014cc:	6861      	ldr	r1, [r4, #4]
 80014ce:	4299      	cmp	r1, r3
 80014d0:	bfde      	ittt	le
 80014d2:	2330      	movle	r3, #48	@ 0x30
 80014d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80014d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80014dc:	1b92      	subs	r2, r2, r6
 80014de:	6122      	str	r2, [r4, #16]
 80014e0:	f8cd a000 	str.w	sl, [sp]
 80014e4:	464b      	mov	r3, r9
 80014e6:	aa03      	add	r2, sp, #12
 80014e8:	4621      	mov	r1, r4
 80014ea:	4640      	mov	r0, r8
 80014ec:	f7ff fee6 	bl	80012bc <_printf_common>
 80014f0:	3001      	adds	r0, #1
 80014f2:	d14a      	bne.n	800158a <_printf_i+0x1f2>
 80014f4:	f04f 30ff 	mov.w	r0, #4294967295
 80014f8:	b004      	add	sp, #16
 80014fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014fe:	6823      	ldr	r3, [r4, #0]
 8001500:	f043 0320 	orr.w	r3, r3, #32
 8001504:	6023      	str	r3, [r4, #0]
 8001506:	4833      	ldr	r0, [pc, #204]	@ (80015d4 <_printf_i+0x23c>)
 8001508:	2778      	movs	r7, #120	@ 0x78
 800150a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800150e:	6823      	ldr	r3, [r4, #0]
 8001510:	6831      	ldr	r1, [r6, #0]
 8001512:	061f      	lsls	r7, r3, #24
 8001514:	f851 5b04 	ldr.w	r5, [r1], #4
 8001518:	d402      	bmi.n	8001520 <_printf_i+0x188>
 800151a:	065f      	lsls	r7, r3, #25
 800151c:	bf48      	it	mi
 800151e:	b2ad      	uxthmi	r5, r5
 8001520:	6031      	str	r1, [r6, #0]
 8001522:	07d9      	lsls	r1, r3, #31
 8001524:	bf44      	itt	mi
 8001526:	f043 0320 	orrmi.w	r3, r3, #32
 800152a:	6023      	strmi	r3, [r4, #0]
 800152c:	b11d      	cbz	r5, 8001536 <_printf_i+0x19e>
 800152e:	2310      	movs	r3, #16
 8001530:	e7ac      	b.n	800148c <_printf_i+0xf4>
 8001532:	4827      	ldr	r0, [pc, #156]	@ (80015d0 <_printf_i+0x238>)
 8001534:	e7e9      	b.n	800150a <_printf_i+0x172>
 8001536:	6823      	ldr	r3, [r4, #0]
 8001538:	f023 0320 	bic.w	r3, r3, #32
 800153c:	6023      	str	r3, [r4, #0]
 800153e:	e7f6      	b.n	800152e <_printf_i+0x196>
 8001540:	4616      	mov	r6, r2
 8001542:	e7bd      	b.n	80014c0 <_printf_i+0x128>
 8001544:	6833      	ldr	r3, [r6, #0]
 8001546:	6825      	ldr	r5, [r4, #0]
 8001548:	6961      	ldr	r1, [r4, #20]
 800154a:	1d18      	adds	r0, r3, #4
 800154c:	6030      	str	r0, [r6, #0]
 800154e:	062e      	lsls	r6, r5, #24
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	d501      	bpl.n	8001558 <_printf_i+0x1c0>
 8001554:	6019      	str	r1, [r3, #0]
 8001556:	e002      	b.n	800155e <_printf_i+0x1c6>
 8001558:	0668      	lsls	r0, r5, #25
 800155a:	d5fb      	bpl.n	8001554 <_printf_i+0x1bc>
 800155c:	8019      	strh	r1, [r3, #0]
 800155e:	2300      	movs	r3, #0
 8001560:	6123      	str	r3, [r4, #16]
 8001562:	4616      	mov	r6, r2
 8001564:	e7bc      	b.n	80014e0 <_printf_i+0x148>
 8001566:	6833      	ldr	r3, [r6, #0]
 8001568:	1d1a      	adds	r2, r3, #4
 800156a:	6032      	str	r2, [r6, #0]
 800156c:	681e      	ldr	r6, [r3, #0]
 800156e:	6862      	ldr	r2, [r4, #4]
 8001570:	2100      	movs	r1, #0
 8001572:	4630      	mov	r0, r6
 8001574:	f7fe fe34 	bl	80001e0 <memchr>
 8001578:	b108      	cbz	r0, 800157e <_printf_i+0x1e6>
 800157a:	1b80      	subs	r0, r0, r6
 800157c:	6060      	str	r0, [r4, #4]
 800157e:	6863      	ldr	r3, [r4, #4]
 8001580:	6123      	str	r3, [r4, #16]
 8001582:	2300      	movs	r3, #0
 8001584:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001588:	e7aa      	b.n	80014e0 <_printf_i+0x148>
 800158a:	6923      	ldr	r3, [r4, #16]
 800158c:	4632      	mov	r2, r6
 800158e:	4649      	mov	r1, r9
 8001590:	4640      	mov	r0, r8
 8001592:	47d0      	blx	sl
 8001594:	3001      	adds	r0, #1
 8001596:	d0ad      	beq.n	80014f4 <_printf_i+0x15c>
 8001598:	6823      	ldr	r3, [r4, #0]
 800159a:	079b      	lsls	r3, r3, #30
 800159c:	d413      	bmi.n	80015c6 <_printf_i+0x22e>
 800159e:	68e0      	ldr	r0, [r4, #12]
 80015a0:	9b03      	ldr	r3, [sp, #12]
 80015a2:	4298      	cmp	r0, r3
 80015a4:	bfb8      	it	lt
 80015a6:	4618      	movlt	r0, r3
 80015a8:	e7a6      	b.n	80014f8 <_printf_i+0x160>
 80015aa:	2301      	movs	r3, #1
 80015ac:	4632      	mov	r2, r6
 80015ae:	4649      	mov	r1, r9
 80015b0:	4640      	mov	r0, r8
 80015b2:	47d0      	blx	sl
 80015b4:	3001      	adds	r0, #1
 80015b6:	d09d      	beq.n	80014f4 <_printf_i+0x15c>
 80015b8:	3501      	adds	r5, #1
 80015ba:	68e3      	ldr	r3, [r4, #12]
 80015bc:	9903      	ldr	r1, [sp, #12]
 80015be:	1a5b      	subs	r3, r3, r1
 80015c0:	42ab      	cmp	r3, r5
 80015c2:	dcf2      	bgt.n	80015aa <_printf_i+0x212>
 80015c4:	e7eb      	b.n	800159e <_printf_i+0x206>
 80015c6:	2500      	movs	r5, #0
 80015c8:	f104 0619 	add.w	r6, r4, #25
 80015cc:	e7f5      	b.n	80015ba <_printf_i+0x222>
 80015ce:	bf00      	nop
 80015d0:	08001a07 	.word	0x08001a07
 80015d4:	08001a18 	.word	0x08001a18

080015d8 <__sflush_r>:
 80015d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80015dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015e0:	0716      	lsls	r6, r2, #28
 80015e2:	4605      	mov	r5, r0
 80015e4:	460c      	mov	r4, r1
 80015e6:	d454      	bmi.n	8001692 <__sflush_r+0xba>
 80015e8:	684b      	ldr	r3, [r1, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	dc02      	bgt.n	80015f4 <__sflush_r+0x1c>
 80015ee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	dd48      	ble.n	8001686 <__sflush_r+0xae>
 80015f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80015f6:	2e00      	cmp	r6, #0
 80015f8:	d045      	beq.n	8001686 <__sflush_r+0xae>
 80015fa:	2300      	movs	r3, #0
 80015fc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001600:	682f      	ldr	r7, [r5, #0]
 8001602:	6a21      	ldr	r1, [r4, #32]
 8001604:	602b      	str	r3, [r5, #0]
 8001606:	d030      	beq.n	800166a <__sflush_r+0x92>
 8001608:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800160a:	89a3      	ldrh	r3, [r4, #12]
 800160c:	0759      	lsls	r1, r3, #29
 800160e:	d505      	bpl.n	800161c <__sflush_r+0x44>
 8001610:	6863      	ldr	r3, [r4, #4]
 8001612:	1ad2      	subs	r2, r2, r3
 8001614:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001616:	b10b      	cbz	r3, 800161c <__sflush_r+0x44>
 8001618:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800161a:	1ad2      	subs	r2, r2, r3
 800161c:	2300      	movs	r3, #0
 800161e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001620:	6a21      	ldr	r1, [r4, #32]
 8001622:	4628      	mov	r0, r5
 8001624:	47b0      	blx	r6
 8001626:	1c43      	adds	r3, r0, #1
 8001628:	89a3      	ldrh	r3, [r4, #12]
 800162a:	d106      	bne.n	800163a <__sflush_r+0x62>
 800162c:	6829      	ldr	r1, [r5, #0]
 800162e:	291d      	cmp	r1, #29
 8001630:	d82b      	bhi.n	800168a <__sflush_r+0xb2>
 8001632:	4a2a      	ldr	r2, [pc, #168]	@ (80016dc <__sflush_r+0x104>)
 8001634:	410a      	asrs	r2, r1
 8001636:	07d6      	lsls	r6, r2, #31
 8001638:	d427      	bmi.n	800168a <__sflush_r+0xb2>
 800163a:	2200      	movs	r2, #0
 800163c:	6062      	str	r2, [r4, #4]
 800163e:	04d9      	lsls	r1, r3, #19
 8001640:	6922      	ldr	r2, [r4, #16]
 8001642:	6022      	str	r2, [r4, #0]
 8001644:	d504      	bpl.n	8001650 <__sflush_r+0x78>
 8001646:	1c42      	adds	r2, r0, #1
 8001648:	d101      	bne.n	800164e <__sflush_r+0x76>
 800164a:	682b      	ldr	r3, [r5, #0]
 800164c:	b903      	cbnz	r3, 8001650 <__sflush_r+0x78>
 800164e:	6560      	str	r0, [r4, #84]	@ 0x54
 8001650:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001652:	602f      	str	r7, [r5, #0]
 8001654:	b1b9      	cbz	r1, 8001686 <__sflush_r+0xae>
 8001656:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800165a:	4299      	cmp	r1, r3
 800165c:	d002      	beq.n	8001664 <__sflush_r+0x8c>
 800165e:	4628      	mov	r0, r5
 8001660:	f7ff fbf2 	bl	8000e48 <_free_r>
 8001664:	2300      	movs	r3, #0
 8001666:	6363      	str	r3, [r4, #52]	@ 0x34
 8001668:	e00d      	b.n	8001686 <__sflush_r+0xae>
 800166a:	2301      	movs	r3, #1
 800166c:	4628      	mov	r0, r5
 800166e:	47b0      	blx	r6
 8001670:	4602      	mov	r2, r0
 8001672:	1c50      	adds	r0, r2, #1
 8001674:	d1c9      	bne.n	800160a <__sflush_r+0x32>
 8001676:	682b      	ldr	r3, [r5, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d0c6      	beq.n	800160a <__sflush_r+0x32>
 800167c:	2b1d      	cmp	r3, #29
 800167e:	d001      	beq.n	8001684 <__sflush_r+0xac>
 8001680:	2b16      	cmp	r3, #22
 8001682:	d11e      	bne.n	80016c2 <__sflush_r+0xea>
 8001684:	602f      	str	r7, [r5, #0]
 8001686:	2000      	movs	r0, #0
 8001688:	e022      	b.n	80016d0 <__sflush_r+0xf8>
 800168a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800168e:	b21b      	sxth	r3, r3
 8001690:	e01b      	b.n	80016ca <__sflush_r+0xf2>
 8001692:	690f      	ldr	r7, [r1, #16]
 8001694:	2f00      	cmp	r7, #0
 8001696:	d0f6      	beq.n	8001686 <__sflush_r+0xae>
 8001698:	0793      	lsls	r3, r2, #30
 800169a:	680e      	ldr	r6, [r1, #0]
 800169c:	bf08      	it	eq
 800169e:	694b      	ldreq	r3, [r1, #20]
 80016a0:	600f      	str	r7, [r1, #0]
 80016a2:	bf18      	it	ne
 80016a4:	2300      	movne	r3, #0
 80016a6:	eba6 0807 	sub.w	r8, r6, r7
 80016aa:	608b      	str	r3, [r1, #8]
 80016ac:	f1b8 0f00 	cmp.w	r8, #0
 80016b0:	dde9      	ble.n	8001686 <__sflush_r+0xae>
 80016b2:	6a21      	ldr	r1, [r4, #32]
 80016b4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80016b6:	4643      	mov	r3, r8
 80016b8:	463a      	mov	r2, r7
 80016ba:	4628      	mov	r0, r5
 80016bc:	47b0      	blx	r6
 80016be:	2800      	cmp	r0, #0
 80016c0:	dc08      	bgt.n	80016d4 <__sflush_r+0xfc>
 80016c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016ca:	81a3      	strh	r3, [r4, #12]
 80016cc:	f04f 30ff 	mov.w	r0, #4294967295
 80016d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80016d4:	4407      	add	r7, r0
 80016d6:	eba8 0800 	sub.w	r8, r8, r0
 80016da:	e7e7      	b.n	80016ac <__sflush_r+0xd4>
 80016dc:	dfbffffe 	.word	0xdfbffffe

080016e0 <_fflush_r>:
 80016e0:	b538      	push	{r3, r4, r5, lr}
 80016e2:	690b      	ldr	r3, [r1, #16]
 80016e4:	4605      	mov	r5, r0
 80016e6:	460c      	mov	r4, r1
 80016e8:	b913      	cbnz	r3, 80016f0 <_fflush_r+0x10>
 80016ea:	2500      	movs	r5, #0
 80016ec:	4628      	mov	r0, r5
 80016ee:	bd38      	pop	{r3, r4, r5, pc}
 80016f0:	b118      	cbz	r0, 80016fa <_fflush_r+0x1a>
 80016f2:	6a03      	ldr	r3, [r0, #32]
 80016f4:	b90b      	cbnz	r3, 80016fa <_fflush_r+0x1a>
 80016f6:	f7ff fa9f 	bl	8000c38 <__sinit>
 80016fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d0f3      	beq.n	80016ea <_fflush_r+0xa>
 8001702:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001704:	07d0      	lsls	r0, r2, #31
 8001706:	d404      	bmi.n	8001712 <_fflush_r+0x32>
 8001708:	0599      	lsls	r1, r3, #22
 800170a:	d402      	bmi.n	8001712 <_fflush_r+0x32>
 800170c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800170e:	f7ff fb98 	bl	8000e42 <__retarget_lock_acquire_recursive>
 8001712:	4628      	mov	r0, r5
 8001714:	4621      	mov	r1, r4
 8001716:	f7ff ff5f 	bl	80015d8 <__sflush_r>
 800171a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800171c:	07da      	lsls	r2, r3, #31
 800171e:	4605      	mov	r5, r0
 8001720:	d4e4      	bmi.n	80016ec <_fflush_r+0xc>
 8001722:	89a3      	ldrh	r3, [r4, #12]
 8001724:	059b      	lsls	r3, r3, #22
 8001726:	d4e1      	bmi.n	80016ec <_fflush_r+0xc>
 8001728:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800172a:	f7ff fb8b 	bl	8000e44 <__retarget_lock_release_recursive>
 800172e:	e7dd      	b.n	80016ec <_fflush_r+0xc>

08001730 <__swbuf_r>:
 8001730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001732:	460e      	mov	r6, r1
 8001734:	4614      	mov	r4, r2
 8001736:	4605      	mov	r5, r0
 8001738:	b118      	cbz	r0, 8001742 <__swbuf_r+0x12>
 800173a:	6a03      	ldr	r3, [r0, #32]
 800173c:	b90b      	cbnz	r3, 8001742 <__swbuf_r+0x12>
 800173e:	f7ff fa7b 	bl	8000c38 <__sinit>
 8001742:	69a3      	ldr	r3, [r4, #24]
 8001744:	60a3      	str	r3, [r4, #8]
 8001746:	89a3      	ldrh	r3, [r4, #12]
 8001748:	071a      	lsls	r2, r3, #28
 800174a:	d501      	bpl.n	8001750 <__swbuf_r+0x20>
 800174c:	6923      	ldr	r3, [r4, #16]
 800174e:	b943      	cbnz	r3, 8001762 <__swbuf_r+0x32>
 8001750:	4621      	mov	r1, r4
 8001752:	4628      	mov	r0, r5
 8001754:	f000 f82a 	bl	80017ac <__swsetup_r>
 8001758:	b118      	cbz	r0, 8001762 <__swbuf_r+0x32>
 800175a:	f04f 37ff 	mov.w	r7, #4294967295
 800175e:	4638      	mov	r0, r7
 8001760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001762:	6823      	ldr	r3, [r4, #0]
 8001764:	6922      	ldr	r2, [r4, #16]
 8001766:	1a98      	subs	r0, r3, r2
 8001768:	6963      	ldr	r3, [r4, #20]
 800176a:	b2f6      	uxtb	r6, r6
 800176c:	4283      	cmp	r3, r0
 800176e:	4637      	mov	r7, r6
 8001770:	dc05      	bgt.n	800177e <__swbuf_r+0x4e>
 8001772:	4621      	mov	r1, r4
 8001774:	4628      	mov	r0, r5
 8001776:	f7ff ffb3 	bl	80016e0 <_fflush_r>
 800177a:	2800      	cmp	r0, #0
 800177c:	d1ed      	bne.n	800175a <__swbuf_r+0x2a>
 800177e:	68a3      	ldr	r3, [r4, #8]
 8001780:	3b01      	subs	r3, #1
 8001782:	60a3      	str	r3, [r4, #8]
 8001784:	6823      	ldr	r3, [r4, #0]
 8001786:	1c5a      	adds	r2, r3, #1
 8001788:	6022      	str	r2, [r4, #0]
 800178a:	701e      	strb	r6, [r3, #0]
 800178c:	6962      	ldr	r2, [r4, #20]
 800178e:	1c43      	adds	r3, r0, #1
 8001790:	429a      	cmp	r2, r3
 8001792:	d004      	beq.n	800179e <__swbuf_r+0x6e>
 8001794:	89a3      	ldrh	r3, [r4, #12]
 8001796:	07db      	lsls	r3, r3, #31
 8001798:	d5e1      	bpl.n	800175e <__swbuf_r+0x2e>
 800179a:	2e0a      	cmp	r6, #10
 800179c:	d1df      	bne.n	800175e <__swbuf_r+0x2e>
 800179e:	4621      	mov	r1, r4
 80017a0:	4628      	mov	r0, r5
 80017a2:	f7ff ff9d 	bl	80016e0 <_fflush_r>
 80017a6:	2800      	cmp	r0, #0
 80017a8:	d0d9      	beq.n	800175e <__swbuf_r+0x2e>
 80017aa:	e7d6      	b.n	800175a <__swbuf_r+0x2a>

080017ac <__swsetup_r>:
 80017ac:	b538      	push	{r3, r4, r5, lr}
 80017ae:	4b29      	ldr	r3, [pc, #164]	@ (8001854 <__swsetup_r+0xa8>)
 80017b0:	4605      	mov	r5, r0
 80017b2:	6818      	ldr	r0, [r3, #0]
 80017b4:	460c      	mov	r4, r1
 80017b6:	b118      	cbz	r0, 80017c0 <__swsetup_r+0x14>
 80017b8:	6a03      	ldr	r3, [r0, #32]
 80017ba:	b90b      	cbnz	r3, 80017c0 <__swsetup_r+0x14>
 80017bc:	f7ff fa3c 	bl	8000c38 <__sinit>
 80017c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80017c4:	0719      	lsls	r1, r3, #28
 80017c6:	d422      	bmi.n	800180e <__swsetup_r+0x62>
 80017c8:	06da      	lsls	r2, r3, #27
 80017ca:	d407      	bmi.n	80017dc <__swsetup_r+0x30>
 80017cc:	2209      	movs	r2, #9
 80017ce:	602a      	str	r2, [r5, #0]
 80017d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017d4:	81a3      	strh	r3, [r4, #12]
 80017d6:	f04f 30ff 	mov.w	r0, #4294967295
 80017da:	e033      	b.n	8001844 <__swsetup_r+0x98>
 80017dc:	0758      	lsls	r0, r3, #29
 80017de:	d512      	bpl.n	8001806 <__swsetup_r+0x5a>
 80017e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80017e2:	b141      	cbz	r1, 80017f6 <__swsetup_r+0x4a>
 80017e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80017e8:	4299      	cmp	r1, r3
 80017ea:	d002      	beq.n	80017f2 <__swsetup_r+0x46>
 80017ec:	4628      	mov	r0, r5
 80017ee:	f7ff fb2b 	bl	8000e48 <_free_r>
 80017f2:	2300      	movs	r3, #0
 80017f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80017f6:	89a3      	ldrh	r3, [r4, #12]
 80017f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80017fc:	81a3      	strh	r3, [r4, #12]
 80017fe:	2300      	movs	r3, #0
 8001800:	6063      	str	r3, [r4, #4]
 8001802:	6923      	ldr	r3, [r4, #16]
 8001804:	6023      	str	r3, [r4, #0]
 8001806:	89a3      	ldrh	r3, [r4, #12]
 8001808:	f043 0308 	orr.w	r3, r3, #8
 800180c:	81a3      	strh	r3, [r4, #12]
 800180e:	6923      	ldr	r3, [r4, #16]
 8001810:	b94b      	cbnz	r3, 8001826 <__swsetup_r+0x7a>
 8001812:	89a3      	ldrh	r3, [r4, #12]
 8001814:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001818:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800181c:	d003      	beq.n	8001826 <__swsetup_r+0x7a>
 800181e:	4621      	mov	r1, r4
 8001820:	4628      	mov	r0, r5
 8001822:	f000 f84f 	bl	80018c4 <__smakebuf_r>
 8001826:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800182a:	f013 0201 	ands.w	r2, r3, #1
 800182e:	d00a      	beq.n	8001846 <__swsetup_r+0x9a>
 8001830:	2200      	movs	r2, #0
 8001832:	60a2      	str	r2, [r4, #8]
 8001834:	6962      	ldr	r2, [r4, #20]
 8001836:	4252      	negs	r2, r2
 8001838:	61a2      	str	r2, [r4, #24]
 800183a:	6922      	ldr	r2, [r4, #16]
 800183c:	b942      	cbnz	r2, 8001850 <__swsetup_r+0xa4>
 800183e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001842:	d1c5      	bne.n	80017d0 <__swsetup_r+0x24>
 8001844:	bd38      	pop	{r3, r4, r5, pc}
 8001846:	0799      	lsls	r1, r3, #30
 8001848:	bf58      	it	pl
 800184a:	6962      	ldrpl	r2, [r4, #20]
 800184c:	60a2      	str	r2, [r4, #8]
 800184e:	e7f4      	b.n	800183a <__swsetup_r+0x8e>
 8001850:	2000      	movs	r0, #0
 8001852:	e7f7      	b.n	8001844 <__swsetup_r+0x98>
 8001854:	2000000c 	.word	0x2000000c

08001858 <_sbrk_r>:
 8001858:	b538      	push	{r3, r4, r5, lr}
 800185a:	4d06      	ldr	r5, [pc, #24]	@ (8001874 <_sbrk_r+0x1c>)
 800185c:	2300      	movs	r3, #0
 800185e:	4604      	mov	r4, r0
 8001860:	4608      	mov	r0, r1
 8001862:	602b      	str	r3, [r5, #0]
 8001864:	f7ff f866 	bl	8000934 <_sbrk>
 8001868:	1c43      	adds	r3, r0, #1
 800186a:	d102      	bne.n	8001872 <_sbrk_r+0x1a>
 800186c:	682b      	ldr	r3, [r5, #0]
 800186e:	b103      	cbz	r3, 8001872 <_sbrk_r+0x1a>
 8001870:	6023      	str	r3, [r4, #0]
 8001872:	bd38      	pop	{r3, r4, r5, pc}
 8001874:	200014b8 	.word	0x200014b8

08001878 <__swhatbuf_r>:
 8001878:	b570      	push	{r4, r5, r6, lr}
 800187a:	460c      	mov	r4, r1
 800187c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001880:	2900      	cmp	r1, #0
 8001882:	b096      	sub	sp, #88	@ 0x58
 8001884:	4615      	mov	r5, r2
 8001886:	461e      	mov	r6, r3
 8001888:	da0d      	bge.n	80018a6 <__swhatbuf_r+0x2e>
 800188a:	89a3      	ldrh	r3, [r4, #12]
 800188c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001890:	f04f 0100 	mov.w	r1, #0
 8001894:	bf14      	ite	ne
 8001896:	2340      	movne	r3, #64	@ 0x40
 8001898:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800189c:	2000      	movs	r0, #0
 800189e:	6031      	str	r1, [r6, #0]
 80018a0:	602b      	str	r3, [r5, #0]
 80018a2:	b016      	add	sp, #88	@ 0x58
 80018a4:	bd70      	pop	{r4, r5, r6, pc}
 80018a6:	466a      	mov	r2, sp
 80018a8:	f000 f848 	bl	800193c <_fstat_r>
 80018ac:	2800      	cmp	r0, #0
 80018ae:	dbec      	blt.n	800188a <__swhatbuf_r+0x12>
 80018b0:	9901      	ldr	r1, [sp, #4]
 80018b2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80018b6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80018ba:	4259      	negs	r1, r3
 80018bc:	4159      	adcs	r1, r3
 80018be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018c2:	e7eb      	b.n	800189c <__swhatbuf_r+0x24>

080018c4 <__smakebuf_r>:
 80018c4:	898b      	ldrh	r3, [r1, #12]
 80018c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80018c8:	079d      	lsls	r5, r3, #30
 80018ca:	4606      	mov	r6, r0
 80018cc:	460c      	mov	r4, r1
 80018ce:	d507      	bpl.n	80018e0 <__smakebuf_r+0x1c>
 80018d0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80018d4:	6023      	str	r3, [r4, #0]
 80018d6:	6123      	str	r3, [r4, #16]
 80018d8:	2301      	movs	r3, #1
 80018da:	6163      	str	r3, [r4, #20]
 80018dc:	b003      	add	sp, #12
 80018de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018e0:	ab01      	add	r3, sp, #4
 80018e2:	466a      	mov	r2, sp
 80018e4:	f7ff ffc8 	bl	8001878 <__swhatbuf_r>
 80018e8:	9f00      	ldr	r7, [sp, #0]
 80018ea:	4605      	mov	r5, r0
 80018ec:	4639      	mov	r1, r7
 80018ee:	4630      	mov	r0, r6
 80018f0:	f7ff fb16 	bl	8000f20 <_malloc_r>
 80018f4:	b948      	cbnz	r0, 800190a <__smakebuf_r+0x46>
 80018f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80018fa:	059a      	lsls	r2, r3, #22
 80018fc:	d4ee      	bmi.n	80018dc <__smakebuf_r+0x18>
 80018fe:	f023 0303 	bic.w	r3, r3, #3
 8001902:	f043 0302 	orr.w	r3, r3, #2
 8001906:	81a3      	strh	r3, [r4, #12]
 8001908:	e7e2      	b.n	80018d0 <__smakebuf_r+0xc>
 800190a:	89a3      	ldrh	r3, [r4, #12]
 800190c:	6020      	str	r0, [r4, #0]
 800190e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001912:	81a3      	strh	r3, [r4, #12]
 8001914:	9b01      	ldr	r3, [sp, #4]
 8001916:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800191a:	b15b      	cbz	r3, 8001934 <__smakebuf_r+0x70>
 800191c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001920:	4630      	mov	r0, r6
 8001922:	f000 f81d 	bl	8001960 <_isatty_r>
 8001926:	b128      	cbz	r0, 8001934 <__smakebuf_r+0x70>
 8001928:	89a3      	ldrh	r3, [r4, #12]
 800192a:	f023 0303 	bic.w	r3, r3, #3
 800192e:	f043 0301 	orr.w	r3, r3, #1
 8001932:	81a3      	strh	r3, [r4, #12]
 8001934:	89a3      	ldrh	r3, [r4, #12]
 8001936:	431d      	orrs	r5, r3
 8001938:	81a5      	strh	r5, [r4, #12]
 800193a:	e7cf      	b.n	80018dc <__smakebuf_r+0x18>

0800193c <_fstat_r>:
 800193c:	b538      	push	{r3, r4, r5, lr}
 800193e:	4d07      	ldr	r5, [pc, #28]	@ (800195c <_fstat_r+0x20>)
 8001940:	2300      	movs	r3, #0
 8001942:	4604      	mov	r4, r0
 8001944:	4608      	mov	r0, r1
 8001946:	4611      	mov	r1, r2
 8001948:	602b      	str	r3, [r5, #0]
 800194a:	f7fe ffcb 	bl	80008e4 <_fstat>
 800194e:	1c43      	adds	r3, r0, #1
 8001950:	d102      	bne.n	8001958 <_fstat_r+0x1c>
 8001952:	682b      	ldr	r3, [r5, #0]
 8001954:	b103      	cbz	r3, 8001958 <_fstat_r+0x1c>
 8001956:	6023      	str	r3, [r4, #0]
 8001958:	bd38      	pop	{r3, r4, r5, pc}
 800195a:	bf00      	nop
 800195c:	200014b8 	.word	0x200014b8

08001960 <_isatty_r>:
 8001960:	b538      	push	{r3, r4, r5, lr}
 8001962:	4d06      	ldr	r5, [pc, #24]	@ (800197c <_isatty_r+0x1c>)
 8001964:	2300      	movs	r3, #0
 8001966:	4604      	mov	r4, r0
 8001968:	4608      	mov	r0, r1
 800196a:	602b      	str	r3, [r5, #0]
 800196c:	f7fe ffca 	bl	8000904 <_isatty>
 8001970:	1c43      	adds	r3, r0, #1
 8001972:	d102      	bne.n	800197a <_isatty_r+0x1a>
 8001974:	682b      	ldr	r3, [r5, #0]
 8001976:	b103      	cbz	r3, 800197a <_isatty_r+0x1a>
 8001978:	6023      	str	r3, [r4, #0]
 800197a:	bd38      	pop	{r3, r4, r5, pc}
 800197c:	200014b8 	.word	0x200014b8

08001980 <_init>:
 8001980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001982:	bf00      	nop
 8001984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001986:	bc08      	pop	{r3}
 8001988:	469e      	mov	lr, r3
 800198a:	4770      	bx	lr

0800198c <_fini>:
 800198c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800198e:	bf00      	nop
 8001990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001992:	bc08      	pop	{r3}
 8001994:	469e      	mov	lr, r3
 8001996:	4770      	bx	lr
